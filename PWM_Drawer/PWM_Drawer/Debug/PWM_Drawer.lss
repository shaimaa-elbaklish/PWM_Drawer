
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001c0a  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000218  00000000  00000000  00001c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000046d5  00000000  00000000  00001e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000d42  00000000  00000000  00006526  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000127a  00000000  00000000  00007268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005a4  00000000  00000000  000084e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000347  00000000  00000000  00008a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001efb  00000000  00000000  00008dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000188  00000000  00000000  0000acca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00001b92  00001b92  00001c06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ae54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.PWMDrawer_Init 0000001e  000019e4  000019e4  00001a58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.PWMDrawer_MeasureSignal 000000e2  00000e3e  00000e3e  00000eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data 0000003d  00000164  00000164  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.PWMDrawer_DrawSignal 000002ca  000007e4  000007e4  00000858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.GLCD_SelectPage 00000068  000015a8  000015a8  0000161c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.GLCD_SendInstruction 00000040  00001840  00001840  000018b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.GLCD_Init 00000086  00001430  00001430  000014a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.GLCD_SendData 00000040  00001880  00001880  000018f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.GLCD_Reset 0000001e  00001a02  00001a02  00001a76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.GLCD_DisplaySpecialPattern 000000a6  0000124a  0000124a  000012be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.GLCD_DisplayCharacter 00000330  000001ae  000001ae  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.GLCD_DisplayString 0000001a  00001a5a  00001a5a  00001ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.GLCD_DisplayInteger 000000aa  000011a0  000011a0  00001214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.GLCD_DisplayFloatingPoint 0000009a  00001396  00001396  0000140a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.GLCD_GoToLine 00000028  00001956  00001956  000019ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.GLCD_ClearDisplay 0000004c  0000176c  0000176c  000017e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .bss.gu8_Curr_Page 00000001  00800062  00800062  00001c0a  2**0
                  ALLOC
 30 .bss.gu8_Curr_Y_Address 00000001  00800063  00800063  00001c0a  2**0
                  ALLOC
 31 .bss.gu8_Curr_X_Address 00000001  00800064  00800064  00001c0a  2**0
                  ALLOC
 32 .text.main    00000062  00001610  00001610  00001684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.DIO_ObtainRegister 000000a6  000012f0  000012f0  00001364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.DIO_SetPinDirection 0000004e  000016d0  000016d0  00001744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.DIO_WritePin 0000004e  0000171e  0000171e  00001792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.DIO_SetPortDirection 00000024  0000197e  0000197e  000019f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.DIO_WritePort 00000012  00001ad2  00001ad2  00001b46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .progmemx.data.gStrICU_Config 00000004  000001aa  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 39 .text.ICU_SetTriggerEdge 0000001a  00001a74  00001a74  00001ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.ICU_ClearTimerValue 0000000a  00001b72  00001b72  00001be6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.ICU_GetInputCaptureValue 00000010  00001ae4  00001ae4  00001b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.ICU_GetStatus 0000001c  00001a3e  00001a3e  00001ab2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.ICU_InitTimer1 00000078  00001530  00001530  000015a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.ICU_Init 00000014  00001abe  00001abe  00001b32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.ICU_GetDutyCycle_Timer1 0000014e  00000aae  00000aae  00000b22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.ICU_GetDutyCycle 0000000e  00001b14  00001b14  00001b88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .progmemx.data.gaStrPWM_Config 00000009  000001a1  000001a1  00000215  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 48 .text.PWM_InitTimer0 00000132  00000bfc  00000bfc  00000c70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.PWM_InitTimer1 00000306  000004de  000004de  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.PWM_InitTimer2 00000110  00000d2e  00000d2e  00000da2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.PWM_Init 0000002c  0000192a  0000192a  0000199e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .bss.gu16_PWM_TimerTopValue 00000002  00800060  00800060  00001c0a  2**0
                  ALLOC
 53 .text.avrlibc.fplib 0000000e  00001b22  00001b22  00001b96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.avrlibc.fplib 000000ce  000010d2  000010d2  00001146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.avrlibc.fplib 00000008  00001b7c  00001b7c  00001bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.avrlibc.fplib 000000de  00000f20  00000f20  00000f94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.avrlibc.fplib 0000005e  00001672  00001672  000016e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.avrlibc.fplib 0000007a  000014b6  000014b6  0000152a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.avrlibc.fplib 0000000c  00001b5a  00001b5a  00001bce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc.fplib 00000006  00001b8c  00001b8c  00001c00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.avrlibc.fplib 0000000e  00001b30  00001b30  00001ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.avrlibc.fplib 0000000e  00001b3e  00001b3e  00001bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.avrlibc.fplib 00000022  000019a2  000019a2  00001a16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.avrlibc.fplib 00000044  000017b8  000017b8  0000182c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.avrlibc.fplib 0000000e  00001b4c  00001b4c  00001bc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.avrlibc.fplib 00000008  00001b84  00001b84  00001bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.avrlibc.fplib 000000d4  00000ffe  00000ffe  00001072  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.libgcc.mul 00000020  000019c4  000019c4  00001a38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.libgcc.div 0000002e  000018fc  000018fc  00001970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.libgcc.div 00000010  00001af4  00001af4  00001b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.libgcc  0000000c  00001b66  00001b66  00001bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.libgcc.mul 00000016  00001aa8  00001aa8  00001b1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.libgcc  00000010  00001b04  00001b04  00001b78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.libgcc  0000001a  00001a8e  00001a8e  00001b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.libgcc.builtins 0000003c  000018c0  000018c0  00001934  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.libgcc.div 00000044  000017fc  000017fc  00001870  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.libgcc.mul 0000001e  00001a20  00001a20  00001a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
   4:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
   8:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
   c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  10:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  14:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  18:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  1c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  20:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  24:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  28:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  2c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  30:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  34:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  38:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  3c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  40:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  44:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  48:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  4c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  50:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__bad_interrupt>
  54:	ce 01       	movw	r24, r28
  56:	51 02       	muls	r21, r17
  58:	51 02       	muls	r21, r17
  5a:	51 02       	muls	r21, r17
  5c:	51 02       	muls	r21, r17
  5e:	ad 01       	movw	r20, r26
  60:	51 02       	muls	r21, r17
  62:	51 02       	muls	r21, r17
  64:	51 02       	muls	r21, r17
  66:	51 02       	muls	r21, r17
  68:	51 02       	muls	r21, r17
  6a:	51 02       	muls	r21, r17
  6c:	51 02       	muls	r21, r17
  6e:	d9 01       	movw	r26, r18
  70:	c3 01       	movw	r24, r6
  72:	51 02       	muls	r21, r17
  74:	e4 01       	movw	r28, r8
  76:	ef 01       	movw	r28, r30
  78:	fa 01       	movw	r30, r20
  7a:	05 02       	muls	r16, r21
  7c:	10 02       	muls	r17, r16
  7e:	1b 02       	muls	r17, r27
  80:	26 02       	muls	r18, r22
  82:	31 02       	muls	r19, r17
  84:	3c 02       	muls	r19, r28
  86:	47 02       	muls	r20, r23
  88:	51 02       	muls	r21, r17
  8a:	51 02       	muls	r21, r17
  8c:	51 02       	muls	r21, r17
  8e:	b8 01       	movw	r22, r16
  90:	51 02       	muls	r21, r17
  92:	51 02       	muls	r21, r17
  94:	51 02       	muls	r21, r17
  96:	f2 00       	.word	0x00f2	; ????
  98:	51 02       	muls	r21, r17
  9a:	3f 01       	movw	r6, r30
  9c:	55 01       	movw	r10, r10
  9e:	13 01       	movw	r2, r6
  a0:	fd 00       	.word	0x00fd	; ????
  a2:	51 02       	muls	r21, r17
  a4:	76 01       	movw	r14, r12
  a6:	a2 01       	movw	r20, r4
  a8:	51 02       	muls	r21, r17
  aa:	6b 01       	movw	r12, r22
  ac:	51 02       	muls	r21, r17
  ae:	8c 01       	movw	r16, r24
  b0:	34 01       	movw	r6, r8
  b2:	51 02       	muls	r21, r17
  b4:	51 02       	muls	r21, r17
  b6:	1e 01       	movw	r2, r28
  b8:	08 01       	movw	r0, r16
  ba:	97 01       	movw	r18, r14
  bc:	60 01       	movw	r12, r0
  be:	29 01       	movw	r4, r18
  c0:	51 02       	muls	r21, r17
  c2:	51 02       	muls	r21, r17
  c4:	51 02       	muls	r21, r17
  c6:	4a 01       	movw	r8, r20
  c8:	81 01       	movw	r16, r2
  ca:	51 02       	muls	r21, r17
  cc:	51 02       	muls	r21, r17
  ce:	51 02       	muls	r21, r17
  d0:	51 02       	muls	r21, r17
  d2:	51 02       	muls	r21, r17
  d4:	51 02       	muls	r21, r17
  d6:	f2 00       	.word	0x00f2	; ????
  d8:	51 02       	muls	r21, r17
  da:	3f 01       	movw	r6, r30
  dc:	55 01       	movw	r10, r10
  de:	13 01       	movw	r2, r6
  e0:	fd 00       	.word	0x00fd	; ????
  e2:	51 02       	muls	r21, r17
  e4:	76 01       	movw	r14, r12
  e6:	a2 01       	movw	r20, r4
  e8:	51 02       	muls	r21, r17
  ea:	6b 01       	movw	r12, r22
  ec:	51 02       	muls	r21, r17
  ee:	8c 01       	movw	r16, r24
  f0:	34 01       	movw	r6, r8
  f2:	51 02       	muls	r21, r17
  f4:	51 02       	muls	r21, r17
  f6:	1e 01       	movw	r2, r28
  f8:	08 01       	movw	r0, r16
  fa:	97 01       	movw	r18, r14
  fc:	60 01       	movw	r12, r0
  fe:	29 01       	movw	r4, r18
 100:	51 02       	muls	r21, r17
 102:	51 02       	muls	r21, r17
 104:	51 02       	muls	r21, r17
 106:	4a 01       	movw	r8, r20
 108:	81 01       	movw	r16, r2

0000010a <.dinit>:
 10a:	00 60       	ori	r16, 0x00	; 0
 10c:	00 65       	ori	r16, 0x50	; 80
 10e:	80 00       	.word	0x0080	; ????

00000110 <__ctors_end>:
 110:	11 24       	eor	r1, r1
 112:	1f be       	out	0x3f, r1	; 63
 114:	cf e5       	ldi	r28, 0x5F	; 95
 116:	d8 e0       	ldi	r29, 0x08	; 8
 118:	de bf       	out	0x3e, r29	; 62
 11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
 11c:	ea e0       	ldi	r30, 0x0A	; 10
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	17 c0       	rjmp	.+46     	; 0x152 <__do_clear_bss+0x8>
 124:	b5 91       	lpm	r27, Z+
 126:	a5 91       	lpm	r26, Z+
 128:	35 91       	lpm	r19, Z+
 12a:	25 91       	lpm	r18, Z+
 12c:	05 91       	lpm	r16, Z+
 12e:	07 fd       	sbrc	r16, 7
 130:	0c c0       	rjmp	.+24     	; 0x14a <__do_clear_bss>
 132:	95 91       	lpm	r25, Z+
 134:	85 91       	lpm	r24, Z+
 136:	ef 01       	movw	r28, r30
 138:	f9 2f       	mov	r31, r25
 13a:	e8 2f       	mov	r30, r24
 13c:	05 90       	lpm	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	a2 17       	cp	r26, r18
 142:	b3 07       	cpc	r27, r19
 144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x20>
 146:	fe 01       	movw	r30, r28
 148:	04 c0       	rjmp	.+8      	; 0x152 <__do_clear_bss+0x8>

0000014a <__do_clear_bss>:
 14a:	1d 92       	st	X+, r1
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	e1 f7       	brne	.-8      	; 0x14a <__do_clear_bss>
 152:	ef 30       	cpi	r30, 0x0F	; 15
 154:	f4 07       	cpc	r31, r20
 156:	31 f7       	brne	.-52     	; 0x124 <__do_copy_data+0x8>
 158:	0e 94 08 0b 	call	0x1610	; 0x1610 <main>
 15c:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>

Disassembly of section .text:

00001b92 <__bad_interrupt>:
    1b92:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.PWMDrawer_Init:

000019e4 <PWMDrawer_Init>:
	{0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00}
};

void PWMDrawer_Init(void) {
	#if GENERATE_PWM_FROM_SAME_MCU == 1
		GLCD_Init();
    19e4:	0e 94 18 0a 	call	0x1430	; 0x1430 <GLCD_Init>
		GLCD_ClearDisplay();
    19e8:	0e 94 b6 0b 	call	0x176c	; 0x176c <GLCD_ClearDisplay>
		PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
    19ec:	61 ea       	ldi	r22, 0xA1	; 161
    19ee:	71 e0       	ldi	r23, 0x01	; 1
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	0e 94 95 0c 	call	0x192a	; 0x192a <PWM_Init>
		ICU_Init(&gStrICU_Config);			/* Timer 1 is used for Input Capture */
    19f6:	6a ea       	ldi	r22, 0xAA	; 170
    19f8:	71 e0       	ldi	r23, 0x01	; 1
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <ICU_Init>
    1a00:	08 95       	ret

Disassembly of section .text.PWMDrawer_MeasureSignal:

00000e3e <PWMDrawer_MeasureSignal>:
	#else
		PWM_Init(&gaStrPWM_Config[0]);		/* Timer 0 on OC0=PB3 */
	#endif
}

void PWMDrawer_MeasureSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr) {
 e3e:	8f 92       	push	r8
 e40:	9f 92       	push	r9
 e42:	af 92       	push	r10
 e44:	bf 92       	push	r11
 e46:	cf 92       	push	r12
 e48:	df 92       	push	r13
 e4a:	ef 92       	push	r14
 e4c:	ff 92       	push	r15
 e4e:	0f 93       	push	r16
 e50:	1f 93       	push	r17
 e52:	cf 93       	push	r28
 e54:	df 93       	push	r29
 e56:	cd b7       	in	r28, 0x3d	; 61
 e58:	de b7       	in	r29, 0x3e	; 62
 e5a:	28 97       	sbiw	r28, 0x08	; 8
 e5c:	0f b6       	in	r0, 0x3f	; 63
 e5e:	f8 94       	cli
 e60:	de bf       	out	0x3e, r29	; 62
 e62:	0f be       	out	0x3f, r0	; 63
 e64:	cd bf       	out	0x3d, r28	; 61
 e66:	8c 01       	movw	r16, r24
	ICU_DutyCycleType strLocal_Duty = {0, 0};
 e68:	19 82       	std	Y+1, r1	; 0x01
 e6a:	1a 82       	std	Y+2, r1	; 0x02
 e6c:	1b 82       	std	Y+3, r1	; 0x03
 e6e:	1c 82       	std	Y+4, r1	; 0x04
 e70:	1d 82       	std	Y+5, r1	; 0x05
 e72:	1e 82       	std	Y+6, r1	; 0x06
 e74:	1f 82       	std	Y+7, r1	; 0x07
 e76:	18 86       	std	Y+8, r1	; 0x08
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &strLocal_Duty);
 e78:	ae 01       	movw	r20, r28
 e7a:	4f 5f       	subi	r20, 0xFF	; 255
 e7c:	5f 4f       	sbci	r21, 0xFF	; 255
 e7e:	68 e0       	ldi	r22, 0x08	; 8
 e80:	70 e0       	ldi	r23, 0x00	; 0
 e82:	80 e0       	ldi	r24, 0x00	; 0
 e84:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ICU_GetDutyCycle>
	Signal_Data_Ptr->Period_Time_ms = strLocal_Duty.Period_Time;
 e88:	cd 80       	ldd	r12, Y+5	; 0x05
 e8a:	de 80       	ldd	r13, Y+6	; 0x06
 e8c:	ef 80       	ldd	r14, Y+7	; 0x07
 e8e:	f8 84       	ldd	r15, Y+8	; 0x08
 e90:	f8 01       	movw	r30, r16
 e92:	c1 86       	std	Z+9, r12	; 0x09
 e94:	d2 86       	std	Z+10, r13	; 0x0a
 e96:	e3 86       	std	Z+11, r14	; 0x0b
 e98:	f4 86       	std	Z+12, r15	; 0x0c
	Signal_Data_Ptr->High_Time_ms = strLocal_Duty.High_Time;
 e9a:	89 80       	ldd	r8, Y+1	; 0x01
 e9c:	9a 80       	ldd	r9, Y+2	; 0x02
 e9e:	ab 80       	ldd	r10, Y+3	; 0x03
 ea0:	bc 80       	ldd	r11, Y+4	; 0x04
 ea2:	81 82       	std	Z+1, r8	; 0x01
 ea4:	92 82       	std	Z+2, r9	; 0x02
 ea6:	a3 82       	std	Z+3, r10	; 0x03
 ea8:	b4 82       	std	Z+4, r11	; 0x04
	Signal_Data_Ptr->Low_Time_ms = strLocal_Duty.Period_Time - strLocal_Duty.High_Time;
 eaa:	a5 01       	movw	r20, r10
 eac:	94 01       	movw	r18, r8
 eae:	c7 01       	movw	r24, r14
 eb0:	b6 01       	movw	r22, r12
 eb2:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
 eb6:	f8 01       	movw	r30, r16
 eb8:	65 83       	std	Z+5, r22	; 0x05
 eba:	76 83       	std	Z+6, r23	; 0x06
 ebc:	87 83       	std	Z+7, r24	; 0x07
 ebe:	90 87       	std	Z+8, r25	; 0x08
	
	Signal_Data_Ptr->Freq_kHz = (1.0 / (Signal_Data_Ptr->Period_Time_ms));
 ec0:	a7 01       	movw	r20, r14
 ec2:	96 01       	movw	r18, r12
 ec4:	60 e0       	ldi	r22, 0x00	; 0
 ec6:	70 e0       	ldi	r23, 0x00	; 0
 ec8:	80 e8       	ldi	r24, 0x80	; 128
 eca:	9f e3       	ldi	r25, 0x3F	; 63
 ecc:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 ed0:	f8 01       	movw	r30, r16
 ed2:	65 87       	std	Z+13, r22	; 0x0d
 ed4:	76 87       	std	Z+14, r23	; 0x0e
 ed6:	87 87       	std	Z+15, r24	; 0x0f
 ed8:	90 8b       	std	Z+16, r25	; 0x10
	Signal_Data_Ptr->Duty_Percent = (uint8)((Signal_Data_Ptr->High_Time_ms) * 100.0 / (Signal_Data_Ptr->Period_Time_ms));
 eda:	20 e0       	ldi	r18, 0x00	; 0
 edc:	30 e0       	ldi	r19, 0x00	; 0
 ede:	48 ec       	ldi	r20, 0xC8	; 200
 ee0:	52 e4       	ldi	r21, 0x42	; 66
 ee2:	c5 01       	movw	r24, r10
 ee4:	b4 01       	movw	r22, r8
 ee6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 eea:	a7 01       	movw	r20, r14
 eec:	96 01       	movw	r18, r12
 eee:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 ef2:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 ef6:	f8 01       	movw	r30, r16
 ef8:	60 83       	st	Z, r22
}
 efa:	28 96       	adiw	r28, 0x08	; 8
 efc:	0f b6       	in	r0, 0x3f	; 63
 efe:	f8 94       	cli
 f00:	de bf       	out	0x3e, r29	; 62
 f02:	0f be       	out	0x3f, r0	; 63
 f04:	cd bf       	out	0x3d, r28	; 61
 f06:	df 91       	pop	r29
 f08:	cf 91       	pop	r28
 f0a:	1f 91       	pop	r17
 f0c:	0f 91       	pop	r16
 f0e:	ff 90       	pop	r15
 f10:	ef 90       	pop	r14
 f12:	df 90       	pop	r13
 f14:	cf 90       	pop	r12
 f16:	bf 90       	pop	r11
 f18:	af 90       	pop	r10
 f1a:	9f 90       	pop	r9
 f1c:	8f 90       	pop	r8
 f1e:	08 95       	ret

Disassembly of section .text.PWMDrawer_DrawSignal:

000007e4 <PWMDrawer_DrawSignal>:

void PWMDrawer_DrawSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr, float32 Scale_ms) {
 7e4:	af 92       	push	r10
 7e6:	bf 92       	push	r11
 7e8:	cf 92       	push	r12
 7ea:	df 92       	push	r13
 7ec:	ef 92       	push	r14
 7ee:	ff 92       	push	r15
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	ec 97       	sbiw	r28, 0x3c	; 60
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	5c 01       	movw	r10, r24
 80a:	6a 01       	movw	r12, r20
 80c:	7b 01       	movw	r14, r22
	GLCD_ClearDisplay();
 80e:	0e 94 b6 0b 	call	0x176c	; 0x176c <GLCD_ClearDisplay>
	/* Display Signal Data (Frequency and Duty) Values */
	GLCD_GoToLine(0);
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GLCD_GoToLine>
	char txt1[15] = "Frequency=\0";
 818:	24 e6       	ldi	r18, 0x64	; 100
 81a:	31 e0       	ldi	r19, 0x01	; 1
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	8c e0       	ldi	r24, 0x0C	; 12
 820:	f9 01       	movw	r30, r18
 822:	de 01       	movw	r26, r28
 824:	11 96       	adiw	r26, 0x01	; 1
 826:	74 2f       	mov	r23, r20
 828:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__movmemx_qi>
 82c:	fe 01       	movw	r30, r28
 82e:	3d 96       	adiw	r30, 0x0d	; 13
 830:	83 e0       	ldi	r24, 0x03	; 3
 832:	df 01       	movw	r26, r30
 834:	1d 92       	st	X+, r1
 836:	8a 95       	dec	r24
 838:	e9 f7       	brne	.-6      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	GLCD_DisplayString(txt1);
 83a:	ce 01       	movw	r24, r28
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
 842:	f5 01       	movw	r30, r10
 844:	65 85       	ldd	r22, Z+13	; 0x0d
 846:	76 85       	ldd	r23, Z+14	; 0x0e
 848:	87 85       	ldd	r24, Z+15	; 0x0f
 84a:	90 89       	ldd	r25, Z+16	; 0x10
 84c:	0e 94 cb 09 	call	0x1396	; 0x1396 <GLCD_DisplayFloatingPoint>
	char txt2[5] = " kHz\0";
 850:	23 e7       	ldi	r18, 0x73	; 115
 852:	31 e0       	ldi	r19, 0x01	; 1
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	85 e0       	ldi	r24, 0x05	; 5
 858:	f9 01       	movw	r30, r18
 85a:	de 01       	movw	r26, r28
 85c:	50 96       	adiw	r26, 0x10	; 16
 85e:	74 2f       	mov	r23, r20
 860:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__movmemx_qi>
	GLCD_DisplayString(txt2);
 864:	ce 01       	movw	r24, r28
 866:	40 96       	adiw	r24, 0x10	; 16
 868:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GLCD_DisplayString>

	GLCD_GoToLine(1);
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GLCD_GoToLine>
	char txt3[15] = "Duty=\0";
 872:	29 e7       	ldi	r18, 0x79	; 121
 874:	31 e0       	ldi	r19, 0x01	; 1
 876:	40 e0       	ldi	r20, 0x00	; 0
 878:	87 e0       	ldi	r24, 0x07	; 7
 87a:	f9 01       	movw	r30, r18
 87c:	de 01       	movw	r26, r28
 87e:	55 96       	adiw	r26, 0x15	; 21
 880:	74 2f       	mov	r23, r20
 882:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__movmemx_qi>
 886:	fe 01       	movw	r30, r28
 888:	7c 96       	adiw	r30, 0x1c	; 28
 88a:	88 e0       	ldi	r24, 0x08	; 8
 88c:	df 01       	movw	r26, r30
 88e:	1d 92       	st	X+, r1
 890:	8a 95       	dec	r24
 892:	e9 f7       	brne	.-6      	; 0x88e <__stack+0x2f>
	GLCD_DisplayString(txt3);
 894:	ce 01       	movw	r24, r28
 896:	45 96       	adiw	r24, 0x15	; 21
 898:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
 89c:	f5 01       	movw	r30, r10
 89e:	60 81       	ld	r22, Z
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <GLCD_DisplayInteger>
	char txt4[5] = " %\0";
 8aa:	88 e8       	ldi	r24, 0x88	; 136
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	a0 e0       	ldi	r26, 0x00	; 0
 8b0:	fc 01       	movw	r30, r24
 8b2:	5a 2f       	mov	r21, r26
 8b4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__xload_2>
 8b8:	7d a3       	std	Y+37, r23	; 0x25
 8ba:	6c a3       	std	Y+36, r22	; 0x24
 8bc:	8a e8       	ldi	r24, 0x8A	; 138
 8be:	91 e0       	ldi	r25, 0x01	; 1
 8c0:	a0 e0       	ldi	r26, 0x00	; 0
 8c2:	fc 01       	movw	r30, r24
 8c4:	5a 2f       	mov	r21, r26
 8c6:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__xload_2>
 8ca:	7f a3       	std	Y+39, r23	; 0x27
 8cc:	6e a3       	std	Y+38, r22	; 0x26
 8ce:	18 a6       	std	Y+40, r1	; 0x28
	GLCD_DisplayString(txt4);
 8d0:	ce 01       	movw	r24, r28
 8d2:	84 96       	adiw	r24, 0x24	; 36
 8d4:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GLCD_DisplayString>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
 8d8:	86 e0       	ldi	r24, 0x06	; 6
 8da:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GLCD_GoToLine>
	uint8 pixel_width_count = 0;
 8de:	10 e0       	ldi	r17, 0x00	; 0
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
 8e0:	4e c0       	rjmp	.+156    	; 0x97e <__stack+0x11f>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
 8e2:	20 e4       	ldi	r18, 0x40	; 64
 8e4:	30 e4       	ldi	r19, 0x40	; 64
 8e6:	4e e7       	ldi	r20, 0x7E	; 126
 8e8:	52 e0       	ldi	r21, 0x02	; 2
 8ea:	62 e0       	ldi	r22, 0x02	; 2
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 8f6:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
 8f8:	00 e0       	ldi	r16, 0x00	; 0
 8fa:	0c c0       	rjmp	.+24     	; 0x914 <__stack+0xb5>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
 8fc:	22 e0       	ldi	r18, 0x02	; 2
 8fe:	32 e0       	ldi	r19, 0x02	; 2
 900:	42 e0       	ldi	r20, 0x02	; 2
 902:	52 e0       	ldi	r21, 0x02	; 2
 904:	62 e0       	ldi	r22, 0x02	; 2
 906:	70 e0       	ldi	r23, 0x00	; 0
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 910:	1b 5f       	subi	r17, 0xFB	; 251
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
 912:	0f 5f       	subi	r16, 0xFF	; 255
 914:	d5 01       	movw	r26, r10
 916:	11 96       	adiw	r26, 0x01	; 1
 918:	6d 91       	ld	r22, X+
 91a:	7d 91       	ld	r23, X+
 91c:	8d 91       	ld	r24, X+
 91e:	9c 91       	ld	r25, X
 920:	14 97       	sbiw	r26, 0x04	; 4
 922:	a7 01       	movw	r20, r14
 924:	96 01       	movw	r18, r12
 926:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 92a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 92e:	06 17       	cp	r16, r22
 930:	28 f3       	brcs	.-54     	; 0x8fc <__stack+0x9d>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
 932:	22 e0       	ldi	r18, 0x02	; 2
 934:	32 e0       	ldi	r19, 0x02	; 2
 936:	4e e7       	ldi	r20, 0x7E	; 126
 938:	50 e4       	ldi	r21, 0x40	; 64
 93a:	60 e4       	ldi	r22, 0x40	; 64
 93c:	70 e0       	ldi	r23, 0x00	; 0
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 946:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
 948:	00 e0       	ldi	r16, 0x00	; 0
 94a:	0c c0       	rjmp	.+24     	; 0x964 <__stack+0x105>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
 94c:	20 e4       	ldi	r18, 0x40	; 64
 94e:	30 e4       	ldi	r19, 0x40	; 64
 950:	40 e4       	ldi	r20, 0x40	; 64
 952:	50 e4       	ldi	r21, 0x40	; 64
 954:	60 e4       	ldi	r22, 0x40	; 64
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 960:	1b 5f       	subi	r17, 0xFB	; 251
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
 962:	0f 5f       	subi	r16, 0xFF	; 255
 964:	f5 01       	movw	r30, r10
 966:	65 81       	ldd	r22, Z+5	; 0x05
 968:	76 81       	ldd	r23, Z+6	; 0x06
 96a:	87 81       	ldd	r24, Z+7	; 0x07
 96c:	90 85       	ldd	r25, Z+8	; 0x08
 96e:	a7 01       	movw	r20, r14
 970:	96 01       	movw	r18, r12
 972:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 976:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 97a:	06 17       	cp	r16, r22
 97c:	38 f3       	brcs	.-50     	; 0x94c <__stack+0xed>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
 97e:	18 37       	cpi	r17, 0x78	; 120
 980:	08 f4       	brcc	.+2      	; 0x984 <__stack+0x125>
 982:	af cf       	rjmp	.-162    	; 0x8e2 <__stack+0x83>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
 984:	85 e0       	ldi	r24, 0x05	; 5
 986:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
 98a:	20 e0       	ldi	r18, 0x00	; 0
 98c:	3e e3       	ldi	r19, 0x3E	; 62
 98e:	48 e0       	ldi	r20, 0x08	; 8
 990:	5c e1       	ldi	r21, 0x1C	; 28
 992:	6a e2       	ldi	r22, 0x2A	; 42
 994:	70 e0       	ldi	r23, 0x00	; 0
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
 99e:	10 e0       	ldi	r17, 0x00	; 0
 9a0:	0b c0       	rjmp	.+22     	; 0x9b8 <__stack+0x159>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
 9a2:	28 e0       	ldi	r18, 0x08	; 8
 9a4:	38 e0       	ldi	r19, 0x08	; 8
 9a6:	48 e0       	ldi	r20, 0x08	; 8
 9a8:	58 e0       	ldi	r21, 0x08	; 8
 9aa:	68 e0       	ldi	r22, 0x08	; 8
 9ac:	70 e0       	ldi	r23, 0x00	; 0
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
 9b6:	1f 5f       	subi	r17, 0xFF	; 255
 9b8:	d5 01       	movw	r26, r10
 9ba:	11 96       	adiw	r26, 0x01	; 1
 9bc:	6d 91       	ld	r22, X+
 9be:	7d 91       	ld	r23, X+
 9c0:	8d 91       	ld	r24, X+
 9c2:	9c 91       	ld	r25, X
 9c4:	14 97       	sbiw	r26, 0x04	; 4
 9c6:	a7 01       	movw	r20, r14
 9c8:	96 01       	movw	r18, r12
 9ca:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 9ce:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 9d2:	16 17       	cp	r17, r22
 9d4:	30 f3       	brcs	.-52     	; 0x9a2 <__stack+0x143>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
 9d6:	28 e0       	ldi	r18, 0x08	; 8
 9d8:	38 e0       	ldi	r19, 0x08	; 8
 9da:	48 e0       	ldi	r20, 0x08	; 8
 9dc:	58 e0       	ldi	r21, 0x08	; 8
 9de:	68 e0       	ldi	r22, 0x08	; 8
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
 9ea:	10 e0       	ldi	r17, 0x00	; 0
 9ec:	0b c0       	rjmp	.+22     	; 0xa04 <__stack+0x1a5>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
 9ee:	28 e0       	ldi	r18, 0x08	; 8
 9f0:	38 e0       	ldi	r19, 0x08	; 8
 9f2:	48 e0       	ldi	r20, 0x08	; 8
 9f4:	58 e0       	ldi	r21, 0x08	; 8
 9f6:	68 e0       	ldi	r22, 0x08	; 8
 9f8:	70 e0       	ldi	r23, 0x00	; 0
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
 a02:	1f 5f       	subi	r17, 0xFF	; 255
 a04:	f5 01       	movw	r30, r10
 a06:	65 81       	ldd	r22, Z+5	; 0x05
 a08:	76 81       	ldd	r23, Z+6	; 0x06
 a0a:	87 81       	ldd	r24, Z+7	; 0x07
 a0c:	90 85       	ldd	r25, Z+8	; 0x08
 a0e:	a7 01       	movw	r20, r14
 a10:	96 01       	movw	r18, r12
 a12:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 a16:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 a1a:	16 17       	cp	r17, r22
 a1c:	40 f3       	brcs	.-48     	; 0x9ee <__stack+0x18f>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
 a1e:	2a e2       	ldi	r18, 0x2A	; 42
 a20:	3c e1       	ldi	r19, 0x1C	; 28
 a22:	48 e0       	ldi	r20, 0x08	; 8
 a24:	5e e3       	ldi	r21, 0x3E	; 62
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	70 e0       	ldi	r23, 0x00	; 0
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>

	/* Display Time Period Value */
	GLCD_GoToLine(4);
 a32:	84 e0       	ldi	r24, 0x04	; 4
 a34:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GLCD_GoToLine>
	char txt5[15] = " Time=\0";
 a38:	2d e8       	ldi	r18, 0x8D	; 141
 a3a:	31 e0       	ldi	r19, 0x01	; 1
 a3c:	40 e0       	ldi	r20, 0x00	; 0
 a3e:	88 e0       	ldi	r24, 0x08	; 8
 a40:	f9 01       	movw	r30, r18
 a42:	de 01       	movw	r26, r28
 a44:	99 96       	adiw	r26, 0x29	; 41
 a46:	74 2f       	mov	r23, r20
 a48:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__movmemx_qi>
 a4c:	fe 01       	movw	r30, r28
 a4e:	f1 96       	adiw	r30, 0x31	; 49
 a50:	87 e0       	ldi	r24, 0x07	; 7
 a52:	df 01       	movw	r26, r30
 a54:	1d 92       	st	X+, r1
 a56:	8a 95       	dec	r24
 a58:	e9 f7       	brne	.-6      	; 0xa54 <__stack+0x1f5>
	GLCD_DisplayString(txt5);
 a5a:	ce 01       	movw	r24, r28
 a5c:	89 96       	adiw	r24, 0x29	; 41
 a5e:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
 a62:	f5 01       	movw	r30, r10
 a64:	61 85       	ldd	r22, Z+9	; 0x09
 a66:	72 85       	ldd	r23, Z+10	; 0x0a
 a68:	83 85       	ldd	r24, Z+11	; 0x0b
 a6a:	94 85       	ldd	r25, Z+12	; 0x0c
 a6c:	0e 94 cb 09 	call	0x1396	; 0x1396 <GLCD_DisplayFloatingPoint>
	char txt6[5] = " ms\0";
 a70:	2c e9       	ldi	r18, 0x9C	; 156
 a72:	31 e0       	ldi	r19, 0x01	; 1
 a74:	40 e0       	ldi	r20, 0x00	; 0
 a76:	85 e0       	ldi	r24, 0x05	; 5
 a78:	f9 01       	movw	r30, r18
 a7a:	de 01       	movw	r26, r28
 a7c:	d8 96       	adiw	r26, 0x38	; 56
 a7e:	74 2f       	mov	r23, r20
 a80:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <__movmemx_qi>
	GLCD_DisplayString(txt6);
 a84:	ce 01       	movw	r24, r28
 a86:	c8 96       	adiw	r24, 0x38	; 56
 a88:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <GLCD_DisplayString>
 a8c:	ec 96       	adiw	r28, 0x3c	; 60
 a8e:	0f b6       	in	r0, 0x3f	; 63
 a90:	f8 94       	cli
 a92:	de bf       	out	0x3e, r29	; 62
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	cd bf       	out	0x3d, r28	; 61
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	1f 91       	pop	r17
 a9e:	0f 91       	pop	r16
 aa0:	ff 90       	pop	r15
 aa2:	ef 90       	pop	r14
 aa4:	df 90       	pop	r13
 aa6:	cf 90       	pop	r12
 aa8:	bf 90       	pop	r11
 aaa:	af 90       	pop	r10
 aac:	08 95       	ret

Disassembly of section .text.GLCD_SelectPage:

000015a8 <GLCD_SelectPage>:
	GLCD_SelectPage(GLCD_PAGE_0);
	gu8_Curr_Page = 0;
}

void GLCD_SelectPage(GLCD_PageSelectType Page) {
	switch (Page) {
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	89 f0       	breq	.+34     	; 0x15ce <GLCD_SelectPage+0x26>
    15ac:	28 f0       	brcs	.+10     	; 0x15b8 <GLCD_SelectPage+0x10>
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	c9 f0       	breq	.+50     	; 0x15e4 <GLCD_SelectPage+0x3c>
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	11 f1       	breq	.+68     	; 0x15fa <GLCD_SelectPage+0x52>
    15b6:	08 95       	ret
		case GLCD_NO_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	64 e0       	ldi	r22, 0x04	; 4
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	65 e0       	ldi	r22, 0x05	; 5
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
			break;
    15cc:	08 95       	ret
		case GLCD_PAGE_0:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	64 e0       	ldi	r22, 0x04	; 4
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	65 e0       	ldi	r22, 0x05	; 5
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
			break;
    15e2:	08 95       	ret
		case GLCD_PAGE_1:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	65 e0       	ldi	r22, 0x05	; 5
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
			break;
    15f8:	08 95       	ret
		case GLCD_BOTH_PAGES:
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	64 e0       	ldi	r22, 0x04	; 4
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
			DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	65 e0       	ldi	r22, 0x05	; 5
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
    160e:	08 95       	ret

Disassembly of section .text.GLCD_SendInstruction:

00001840 <GLCD_SendInstruction>:
			break;
		default: break;
	}
}

void GLCD_SendInstruction(GLCD_CommandType Instruction) {
    1840:	cf 93       	push	r28
    1842:	c8 2f       	mov	r28, r24
	/* Select Instruction Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	62 e0       	ldi	r22, 0x02	; 2
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Instruction);
    1858:	6c 2f       	mov	r22, r28
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    186a:	8a e1       	ldi	r24, 0x1A	; 26
    186c:	8a 95       	dec	r24
    186e:	f1 f7       	brne	.-4      	; 0x186c <GLCD_SendInstruction+0x2c>
    1870:	00 c0       	rjmp	.+0      	; 0x1872 <GLCD_SendInstruction+0x32>
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
}
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

Disassembly of section .text.GLCD_Init:

00001430 <GLCD_Init>:
void GLCD_Init(void) {
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Init(gaStrGPT_Config);
	#endif
	/* Initialize Port Directions */
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_OUTPUT);
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_OUTPUT);
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	62 e0       	ldi	r22, 0x02	; 2
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_OUTPUT);
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_OUTPUT);
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	66 e0       	ldi	r22, 0x06	; 6
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_OUTPUT);
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	64 e0       	ldi	r22, 0x04	; 4
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_OUTPUT);
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	65 e0       	ldi	r22, 0x05	; 5
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <DIO_SetPinDirection>

	DIO_SetPortDirection(GLCD_DATA_PORT, DIO_OUTPUT);
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_SetPortDirection>
	/* Keep reset pin inactive (high) */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	66 e0       	ldi	r22, 0x06	; 6
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
	/* Initialization of GLCD Sequence */
	GLCD_SelectPage(GLCD_BOTH_PAGES);
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISPLAY_OFF);
    1484:	8e e3       	ldi	r24, 0x3E	; 62
    1486:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + 0);  /* line=0 */
    148a:	88 eb       	ldi	r24, 0xB8	; 184
    148c:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
	gu8_Curr_X_Address = 0;
    1490:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <gu8_Curr_X_Address>
	GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + 0);  /* column=0 */
    1494:	80 e4       	ldi	r24, 0x40	; 64
    1496:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
	gu8_Curr_Y_Address = 0;
    149a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <gu8_Curr_Y_Address>
	GLCD_SendInstruction(GLCD_SET_Z_ADDRESS_PREFIX + 0);  /* start_line=0 */
    149e:	80 ec       	ldi	r24, 0xC0	; 192
    14a0:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISPLAY_ON);
    14a4:	8f e3       	ldi	r24, 0x3F	; 63
    14a6:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GLCD_SelectPage>
	gu8_Curr_Page = 0;
    14b0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <gu8_Curr_Page>
    14b4:	08 95       	ret

Disassembly of section .text.GLCD_SendData:

00001880 <GLCD_SendData>:
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
}

void GLCD_SendData(uint8 Data) {
    1880:	cf 93       	push	r28
    1882:	c8 2f       	mov	r28, r24
	/* Select Data Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	62 e0       	ldi	r22, 0x02	; 2
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WRITE_MODE);
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Data);
    1898:	6c 2f       	mov	r22, r28
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
    18aa:	8a e1       	ldi	r24, 0x1A	; 26
    18ac:	8a 95       	dec	r24
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <GLCD_SendData+0x2c>
    18b0:	00 c0       	rjmp	.+0      	; 0x18b2 <GLCD_SendData+0x32>
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 5);
	#else
		_delay_us(5);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
}
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

Disassembly of section .text.GLCD_Reset:

00001a02 <GLCD_Reset>:

void GLCD_Reset(void) {
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_LOW);
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
    1a0c:	85 e3       	ldi	r24, 0x35	; 53
    1a0e:	8a 95       	dec	r24
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <GLCD_Reset+0xc>
    1a12:	00 00       	nop
	#if GLCD_USE_TIMERS_FOR_DELAY == 1
		GPT_Delay_us(&gaStrGPT_Config[0], 10);
	#else
		_delay_us(10);
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	66 e0       	ldi	r22, 0x06	; 6
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 8f 0b 	call	0x171e	; 0x171e <DIO_WritePin>
    1a1e:	08 95       	ret

Disassembly of section .text.GLCD_DisplaySpecialPattern:

0000124a <GLCD_DisplaySpecialPattern>:
}

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	92 2e       	mov	r9, r18
    1262:	a3 2e       	mov	r10, r19
    1264:	b4 2e       	mov	r11, r20
    1266:	c5 2e       	mov	r12, r21
    1268:	d6 2e       	mov	r13, r22
    126a:	e7 2e       	mov	r14, r23
    126c:	f8 2e       	mov	r15, r24
    126e:	d9 2f       	mov	r29, r25
	for(uint8 i = 0; i < 5; i++) {
    1270:	c0 e0       	ldi	r28, 0x00	; 0
    1272:	30 c0       	rjmp	.+96     	; 0x12d4 <GLCD_DisplaySpecialPattern+0x8a>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    1274:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gu8_Curr_X_Address>
    1278:	88 54       	subi	r24, 0x48	; 72
    127a:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    127e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gu8_Curr_Y_Address>
    1282:	80 5c       	subi	r24, 0xC0	; 192
    1284:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
    1288:	0c 2f       	mov	r16, r28
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	00 0f       	add	r16, r16
    128e:	11 1f       	adc	r17, r17
    1290:	00 0f       	add	r16, r16
    1292:	11 1f       	adc	r17, r17
    1294:	00 0f       	add	r16, r16
    1296:	11 1f       	adc	r17, r17
    1298:	29 2d       	mov	r18, r9
    129a:	3a 2d       	mov	r19, r10
    129c:	4b 2d       	mov	r20, r11
    129e:	5c 2d       	mov	r21, r12
    12a0:	6d 2d       	mov	r22, r13
    12a2:	7e 2d       	mov	r23, r14
    12a4:	8f 2d       	mov	r24, r15
    12a6:	9d 2f       	mov	r25, r29
    12a8:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__lshrdi3>
    12ac:	82 2f       	mov	r24, r18
    12ae:	0e 94 40 0c 	call	0x1880	; 0x1880 <GLCD_SendData>
		gu8_Curr_Y_Address++;
    12b2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gu8_Curr_Y_Address>
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <gu8_Curr_Y_Address>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
    12bc:	80 34       	cpi	r24, 0x40	; 64
    12be:	48 f0       	brcs	.+18     	; 0x12d2 <GLCD_DisplaySpecialPattern+0x88>
    12c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gu8_Curr_Page>
    12c4:	81 11       	cpse	r24, r1
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <GLCD_DisplaySpecialPattern+0x88>
			GLCD_SelectPage(GLCD_PAGE_1);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
    12ce:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <gu8_Curr_Y_Address>
	#endif
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
}

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
	for(uint8 i = 0; i < 5; i++) {
    12d2:	cf 5f       	subi	r28, 0xFF	; 255
    12d4:	c5 30       	cpi	r28, 0x05	; 5
    12d6:	70 f2       	brcs	.-100    	; 0x1274 <GLCD_DisplaySpecialPattern+0x2a>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
			GLCD_SelectPage(GLCD_PAGE_1);
			gu8_Curr_Y_Address = 0;
		}
	}
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	08 95       	ret

Disassembly of section .text.GLCD_DisplayCharacter:

000001ae <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(char Data) {
 1ae:	e8 2f       	mov	r30, r24
	if ((gu8_Curr_Page == 0) | (gu8_Curr_Y_Address < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gu8_Curr_Page>
 1b6:	81 11       	cpse	r24, r1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <gu8_Curr_Y_Address>
 1c0:	29 33       	cpi	r18, 0x39	; 57
 1c2:	08 f0       	brcs	.+2      	; 0x1c6 <GLCD_DisplayCharacter+0x18>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	89 2b       	or	r24, r25
 1c8:	09 f4       	brne	.+2      	; 0x1cc <GLCD_DisplayCharacter+0x1e>
 1ca:	88 c1       	rjmp	.+784    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		/* Enough space to write character */
		switch (Data) {
 1cc:	8e 2f       	mov	r24, r30
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	b0 97       	sbiw	r30, 0x20	; 32
 1d4:	eb 35       	cpi	r30, 0x5B	; 91
 1d6:	f1 05       	cpc	r31, r1
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <GLCD_DisplayCharacter+0x2e>
 1da:	63 c1       	rjmp	.+710    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 1dc:	e6 5d       	subi	r30, 0xD6	; 214
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__tablejump2__>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
 1e4:	2c e7       	ldi	r18, 0x7C	; 124
 1e6:	32 e1       	ldi	r19, 0x12	; 18
 1e8:	41 e1       	ldi	r20, 0x11	; 17
 1ea:	52 e1       	ldi	r21, 0x12	; 18
 1ec:	6c e7       	ldi	r22, 0x7C	; 124
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 1f8:	54 c1       	rjmp	.+680    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
 1fa:	2f e7       	ldi	r18, 0x7F	; 127
 1fc:	39 e0       	ldi	r19, 0x09	; 9
 1fe:	49 e0       	ldi	r20, 0x09	; 9
 200:	59 e0       	ldi	r21, 0x09	; 9
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 20e:	49 c1       	rjmp	.+658    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
 210:	2f e7       	ldi	r18, 0x7F	; 127
 212:	39 e0       	ldi	r19, 0x09	; 9
 214:	49 e1       	ldi	r20, 0x19	; 25
 216:	59 e2       	ldi	r21, 0x29	; 41
 218:	6f e4       	ldi	r22, 0x4F	; 79
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 224:	3e c1       	rjmp	.+636    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
 226:	2f e7       	ldi	r18, 0x7F	; 127
 228:	39 e4       	ldi	r19, 0x49	; 73
 22a:	49 e4       	ldi	r20, 0x49	; 73
 22c:	59 e4       	ldi	r21, 0x49	; 73
 22e:	61 e4       	ldi	r22, 0x41	; 65
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 23a:	33 c1       	rjmp	.+614    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
 23c:	2e e1       	ldi	r18, 0x1E	; 30
 23e:	31 e2       	ldi	r19, 0x21	; 33
 240:	41 e3       	ldi	r20, 0x31	; 49
 242:	5e e3       	ldi	r21, 0x3E	; 62
 244:	60 e4       	ldi	r22, 0x40	; 64
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 250:	28 c1       	rjmp	.+592    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
 252:	2f e3       	ldi	r18, 0x3F	; 63
 254:	30 e4       	ldi	r19, 0x40	; 64
 256:	40 e4       	ldi	r20, 0x40	; 64
 258:	50 e4       	ldi	r21, 0x40	; 64
 25a:	6f e3       	ldi	r22, 0x3F	; 63
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 266:	1d c1       	rjmp	.+570    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
 268:	2f e7       	ldi	r18, 0x7F	; 127
 26a:	32 e0       	ldi	r19, 0x02	; 2
 26c:	4c e1       	ldi	r20, 0x1C	; 28
 26e:	50 e2       	ldi	r21, 0x20	; 32
 270:	6f e7       	ldi	r22, 0x7F	; 127
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 27c:	12 c1       	rjmp	.+548    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
 27e:	2e e3       	ldi	r18, 0x3E	; 62
 280:	31 e4       	ldi	r19, 0x41	; 65
 282:	41 e4       	ldi	r20, 0x41	; 65
 284:	51 e4       	ldi	r21, 0x41	; 65
 286:	61 e4       	ldi	r22, 0x41	; 65
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 292:	07 c1       	rjmp	.+526    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
 294:	23 e0       	ldi	r18, 0x03	; 3
 296:	3c e0       	ldi	r19, 0x0C	; 12
 298:	40 e7       	ldi	r20, 0x70	; 112
 29a:	5c e0       	ldi	r21, 0x0C	; 12
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 2a8:	fc c0       	rjmp	.+504    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
 2aa:	2f e7       	ldi	r18, 0x7F	; 127
 2ac:	31 e4       	ldi	r19, 0x41	; 65
 2ae:	41 e4       	ldi	r20, 0x41	; 65
 2b0:	5e e3       	ldi	r21, 0x3E	; 62
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 2be:	f1 c0       	rjmp	.+482    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	31 e0       	ldi	r19, 0x01	; 1
 2c4:	4f e7       	ldi	r20, 0x7F	; 127
 2c6:	51 e0       	ldi	r21, 0x01	; 1
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 2d4:	e6 c0       	rjmp	.+460    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
 2d6:	2f e7       	ldi	r18, 0x7F	; 127
 2d8:	38 e0       	ldi	r19, 0x08	; 8
 2da:	44 e1       	ldi	r20, 0x14	; 20
 2dc:	52 e2       	ldi	r21, 0x22	; 34
 2de:	61 e4       	ldi	r22, 0x41	; 65
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 2ea:	db c0       	rjmp	.+438    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
 2ec:	2f e7       	ldi	r18, 0x7F	; 127
 2ee:	38 e0       	ldi	r19, 0x08	; 8
 2f0:	48 e0       	ldi	r20, 0x08	; 8
 2f2:	58 e0       	ldi	r21, 0x08	; 8
 2f4:	6f e7       	ldi	r22, 0x7F	; 127
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 300:	d0 c0       	rjmp	.+416    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
 302:	21 e6       	ldi	r18, 0x61	; 97
 304:	31 e5       	ldi	r19, 0x51	; 81
 306:	49 e4       	ldi	r20, 0x49	; 73
 308:	55 e4       	ldi	r21, 0x45	; 69
 30a:	63 e4       	ldi	r22, 0x43	; 67
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 316:	c5 c0       	rjmp	.+394    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
 318:	2f e7       	ldi	r18, 0x7F	; 127
 31a:	32 e0       	ldi	r19, 0x02	; 2
 31c:	4c e0       	ldi	r20, 0x0C	; 12
 31e:	52 e0       	ldi	r21, 0x02	; 2
 320:	6f e7       	ldi	r22, 0x7F	; 127
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 32c:	ba c0       	rjmp	.+372    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
 32e:	2f e4       	ldi	r18, 0x4F	; 79
 330:	39 e4       	ldi	r19, 0x49	; 73
 332:	49 e4       	ldi	r20, 0x49	; 73
 334:	59 e4       	ldi	r21, 0x49	; 73
 336:	69 ef       	ldi	r22, 0xF9	; 249
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 342:	af c0       	rjmp	.+350    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
 344:	21 e4       	ldi	r18, 0x41	; 65
 346:	31 e4       	ldi	r19, 0x41	; 65
 348:	4f e7       	ldi	r20, 0x7F	; 127
 34a:	51 e4       	ldi	r21, 0x41	; 65
 34c:	61 e4       	ldi	r22, 0x41	; 65
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 358:	a4 c0       	rjmp	.+328    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
 35a:	23 ec       	ldi	r18, 0xC3	; 195
 35c:	33 e7       	ldi	r19, 0x73	; 115
 35e:	48 e1       	ldi	r20, 0x18	; 24
 360:	5e ec       	ldi	r21, 0xCE	; 206
 362:	63 ec       	ldi	r22, 0xC3	; 195
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 36e:	99 c0       	rjmp	.+306    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
 370:	24 e2       	ldi	r18, 0x24	; 36
 372:	34 e2       	ldi	r19, 0x24	; 36
 374:	44 e2       	ldi	r20, 0x24	; 36
 376:	54 e2       	ldi	r21, 0x24	; 36
 378:	64 e2       	ldi	r22, 0x24	; 36
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 384:	8e c0       	rjmp	.+284    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e7       	ldi	r19, 0x70	; 112
 38a:	40 e7       	ldi	r20, 0x70	; 112
 38c:	50 e7       	ldi	r21, 0x70	; 112
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 39a:	83 c0       	rjmp	.+262    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 3b0:	78 c0       	rjmp	.+240    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
 3b2:	28 e1       	ldi	r18, 0x18	; 24
 3b4:	38 e1       	ldi	r19, 0x18	; 24
 3b6:	48 e1       	ldi	r20, 0x18	; 24
 3b8:	58 e1       	ldi	r21, 0x18	; 24
 3ba:	68 e1       	ldi	r22, 0x18	; 24
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 3c6:	6d c0       	rjmp	.+218    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
 3c8:	2e e3       	ldi	r18, 0x3E	; 62
 3ca:	31 e5       	ldi	r19, 0x51	; 81
 3cc:	49 e4       	ldi	r20, 0x49	; 73
 3ce:	55 e4       	ldi	r21, 0x45	; 69
 3d0:	6e e3       	ldi	r22, 0x3E	; 62
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 3dc:	62 c0       	rjmp	.+196    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
 3de:	24 e4       	ldi	r18, 0x44	; 68
 3e0:	32 e4       	ldi	r19, 0x42	; 66
 3e2:	4f e7       	ldi	r20, 0x7F	; 127
 3e4:	50 e4       	ldi	r21, 0x40	; 64
 3e6:	60 e4       	ldi	r22, 0x40	; 64
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 3f2:	57 c0       	rjmp	.+174    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
 3f4:	26 e4       	ldi	r18, 0x46	; 70
 3f6:	31 e6       	ldi	r19, 0x61	; 97
 3f8:	41 e5       	ldi	r20, 0x51	; 81
 3fa:	5e e4       	ldi	r21, 0x4E	; 78
 3fc:	60 e4       	ldi	r22, 0x40	; 64
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 408:	4c c0       	rjmp	.+152    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
 40a:	21 e4       	ldi	r18, 0x41	; 65
 40c:	39 e4       	ldi	r19, 0x49	; 73
 40e:	49 e4       	ldi	r20, 0x49	; 73
 410:	59 e4       	ldi	r21, 0x49	; 73
 412:	66 e3       	ldi	r22, 0x36	; 54
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 41e:	41 c0       	rjmp	.+130    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
 420:	28 e1       	ldi	r18, 0x18	; 24
 422:	34 e1       	ldi	r19, 0x14	; 20
 424:	42 e1       	ldi	r20, 0x12	; 18
 426:	5f e7       	ldi	r21, 0x7F	; 127
 428:	60 e1       	ldi	r22, 0x10	; 16
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 434:	36 c0       	rjmp	.+108    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
 436:	2f e4       	ldi	r18, 0x4F	; 79
 438:	39 e4       	ldi	r19, 0x49	; 73
 43a:	49 e4       	ldi	r20, 0x49	; 73
 43c:	51 e5       	ldi	r21, 0x51	; 81
 43e:	61 e2       	ldi	r22, 0x21	; 33
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 44a:	2b c0       	rjmp	.+86     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
 44c:	2c e7       	ldi	r18, 0x7C	; 124
 44e:	3a e4       	ldi	r19, 0x4A	; 74
 450:	49 e4       	ldi	r20, 0x49	; 73
 452:	59 e4       	ldi	r21, 0x49	; 73
 454:	61 e3       	ldi	r22, 0x31	; 49
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 460:	20 c0       	rjmp	.+64     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	39 e4       	ldi	r19, 0x49	; 73
 466:	49 e2       	ldi	r20, 0x29	; 41
 468:	59 e1       	ldi	r21, 0x19	; 25
 46a:	6f e0       	ldi	r22, 0x0F	; 15
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 476:	15 c0       	rjmp	.+42     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
 478:	27 e7       	ldi	r18, 0x77	; 119
 47a:	39 e4       	ldi	r19, 0x49	; 73
 47c:	49 e4       	ldi	r20, 0x49	; 73
 47e:	59 e4       	ldi	r21, 0x49	; 73
 480:	67 e7       	ldi	r22, 0x77	; 119
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
 48c:	0a c0       	rjmp	.+20     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
 48e:	2f e4       	ldi	r18, 0x4F	; 79
 490:	39 e4       	ldi	r19, 0x49	; 73
 492:	49 e4       	ldi	r20, 0x49	; 73
 494:	59 e4       	ldi	r21, 0x49	; 73
 496:	6f e7       	ldi	r22, 0x7F	; 127
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 25 09 	call	0x124a	; 0x124a <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
 4a2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gu8_Curr_X_Address>
 4a6:	88 54       	subi	r24, 0x48	; 72
 4a8:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
 4ac:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gu8_Curr_Y_Address>
 4b0:	80 5c       	subi	r24, 0xC0	; 192
 4b2:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
		GLCD_SendData(0);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 40 0c 	call	0x1880	; 0x1880 <GLCD_SendData>
		gu8_Curr_Y_Address++;
 4bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gu8_Curr_Y_Address>
 4c0:	8f 5f       	subi	r24, 0xFF	; 255
 4c2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <gu8_Curr_Y_Address>
		if (gu8_Curr_Y_Address >= GLCD_MAX_PAGE_PIXEL_WIDTH && gu8_Curr_Page == 0) {
 4c6:	80 34       	cpi	r24, 0x40	; 64
 4c8:	48 f0       	brcs	.+18     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gu8_Curr_Page>
 4ce:	81 11       	cpse	r24, r1
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			GLCD_SelectPage(GLCD_PAGE_1);
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GLCD_SelectPage>
			gu8_Curr_Y_Address = 0;
 4d8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <gu8_Curr_Y_Address>
 4dc:	08 95       	ret

Disassembly of section .text.GLCD_DisplayString:

00001a5a <GLCD_DisplayString>:
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	ec 01       	movw	r28, r24
	while (*Data_Ptr != '\0') {	
    1a60:	03 c0       	rjmp	.+6      	; 0x1a68 <GLCD_DisplayString+0xe>
		GLCD_DisplayCharacter(*Data_Ptr);
    1a62:	0e 94 d7 00 	call	0x1ae	; 0x1ae <GLCD_DisplayCharacter>
		Data_Ptr++;
    1a66:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
	while (*Data_Ptr != '\0') {	
    1a68:	88 81       	ld	r24, Y
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	fa cf       	rjmp	.-12     	; 0x1a62 <GLCD_DisplayString+0x8>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

Disassembly of section .text.GLCD_DisplayInteger:

000011a0 <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(sint32 Data) {
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <GLCD_DisplayInteger+0x12>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <GLCD_DisplayInteger+0x14>
    11b4:	1f 92       	push	r1
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	6b 01       	movw	r12, r22
    11bc:	7c 01       	movw	r14, r24
	if (Data < 0) {
    11be:	99 23       	and	r25, r25
    11c0:	5c f4       	brge	.+22     	; 0x11d8 <GLCD_DisplayInteger+0x38>
		GLCD_DisplayCharacter('-');
    11c2:	8d e2       	ldi	r24, 0x2D	; 45
    11c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <GLCD_DisplayCharacter>
		Data = -1 * Data;
    11c8:	f0 94       	com	r15
    11ca:	e0 94       	com	r14
    11cc:	d0 94       	com	r13
    11ce:	c0 94       	com	r12
    11d0:	c1 1c       	adc	r12, r1
    11d2:	d1 1c       	adc	r13, r1
    11d4:	e1 1c       	adc	r14, r1
    11d6:	f1 1c       	adc	r15, r1
	}
	uint8 u8Local_Digit = 0U;
	char str_reversed[5] = "";
    11d8:	1a 82       	std	Y+2, r1	; 0x02
    11da:	19 82       	std	Y+1, r1	; 0x01
    11dc:	fe 01       	movw	r30, r28
    11de:	33 96       	adiw	r30, 0x03	; 3
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	df 01       	movw	r26, r30
    11e4:	1d 92       	st	X+, r1
    11e6:	8a 95       	dec	r24
    11e8:	e9 f7       	brne	.-6      	; 0x11e4 <GLCD_DisplayInteger+0x44>
	char* str_ptr = str_reversed;
    11ea:	8e 01       	movw	r16, r28
    11ec:	0f 5f       	subi	r16, 0xFF	; 255
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
	do {
		u8Local_Digit = Data%10;
    11f0:	c7 01       	movw	r24, r14
    11f2:	b6 01       	movw	r22, r12
    11f4:	2a e0       	ldi	r18, 0x0A	; 10
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__divmodsi4>
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
    1200:	60 5d       	subi	r22, 0xD0	; 208
    1202:	f8 01       	movw	r30, r16
    1204:	61 93       	st	Z+, r22
    1206:	8f 01       	movw	r16, r30
		Data = Data/10;
    1208:	c2 2e       	mov	r12, r18
    120a:	d3 2e       	mov	r13, r19
    120c:	e4 2e       	mov	r14, r20
    120e:	f5 2e       	mov	r15, r21
		str_ptr++;
	} while (Data > 0);
    1210:	1c 14       	cp	r1, r12
    1212:	1d 04       	cpc	r1, r13
    1214:	1e 04       	cpc	r1, r14
    1216:	1f 04       	cpc	r1, r15
    1218:	5c f3       	brlt	.-42     	; 0x11f0 <GLCD_DisplayInteger+0x50>
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
    121a:	d8 01       	movw	r26, r16
    121c:	8e 91       	ld	r24, -X
    121e:	8d 01       	movw	r16, r26
    1220:	0e 94 d7 00 	call	0x1ae	; 0x1ae <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	80 17       	cp	r24, r16
    122a:	91 07       	cpc	r25, r17
    122c:	b1 f7       	brne	.-20     	; 0x121a <GLCD_DisplayInteger+0x7a>
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	08 95       	ret

Disassembly of section .text.GLCD_DisplayFloatingPoint:

00001396 <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(float32 Data) {
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	4b 01       	movw	r8, r22
    13ac:	5c 01       	movw	r10, r24
	/* Will display only 3 Decimal Places */
	uint16 IntegerPart = (uint16)Data;
    13ae:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
	GLCD_DisplayInteger(IntegerPart);
    13b2:	6b 01       	movw	r12, r22
    13b4:	e1 2c       	mov	r14, r1
    13b6:	f1 2c       	mov	r15, r1
    13b8:	c7 01       	movw	r24, r14
    13ba:	b6 01       	movw	r22, r12
    13bc:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
    13c0:	8e e2       	ldi	r24, 0x2E	; 46
    13c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <GLCD_DisplayCharacter>
	float32 DecimalPart = (Data - IntegerPart);
    13c6:	c7 01       	movw	r24, r14
    13c8:	b6 01       	movw	r22, r12
    13ca:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
    13ce:	9b 01       	movw	r18, r22
    13d0:	ac 01       	movw	r20, r24
    13d2:	c5 01       	movw	r24, r10
    13d4:	b4 01       	movw	r22, r8
    13d6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
    13da:	d0 e0       	ldi	r29, 0x00	; 0
    13dc:	1c c0       	rjmp	.+56     	; 0x1416 <GLCD_DisplayFloatingPoint+0x80>
		Digit = (uint8)(DecimalPart * 10.0);
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e2       	ldi	r20, 0x20	; 32
    13e4:	51 e4       	ldi	r21, 0x41	; 65
    13e6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
    13ea:	6b 01       	movw	r12, r22
    13ec:	7c 01       	movw	r14, r24
    13ee:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
    13f2:	c6 2f       	mov	r28, r22
		GLCD_DisplayCharacter((char)(48+Digit));
    13f4:	80 e3       	ldi	r24, 0x30	; 48
    13f6:	8c 0f       	add	r24, r28
    13f8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
    13fc:	6c 2f       	mov	r22, r28
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__floatsisf>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	c7 01       	movw	r24, r14
    140e:	b6 01       	movw	r22, r12
    1410:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
	uint16 IntegerPart = (uint16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	float32 DecimalPart = (Data - IntegerPart);
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
    1414:	df 5f       	subi	r29, 0xFF	; 255
    1416:	d3 30       	cpi	r29, 0x03	; 3
    1418:	10 f3       	brcs	.-60     	; 0x13de <GLCD_DisplayFloatingPoint+0x48>
		Digit = (uint8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	ff 90       	pop	r15
    1420:	ef 90       	pop	r14
    1422:	df 90       	pop	r13
    1424:	cf 90       	pop	r12
    1426:	bf 90       	pop	r11
    1428:	af 90       	pop	r10
    142a:	9f 90       	pop	r9
    142c:	8f 90       	pop	r8
    142e:	08 95       	ret

Disassembly of section .text.GLCD_GoToLine:

00001956 <GLCD_GoToLine>:

void GLCD_GoToLine(uint8 Line) {
    1956:	cf 93       	push	r28
	if (Line < GLCD_MAX_LINES) {
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	78 f4       	brcc	.+30     	; 0x197a <GLCD_GoToLine+0x24>
    195c:	c8 2f       	mov	r28, r24
		GLCD_SelectPage(GLCD_PAGE_0);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GLCD_SelectPage>
		gu8_Curr_X_Address = Line;
    1964:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <gu8_Curr_X_Address>
		GLCD_SendInstruction(GLCD_SET_X_ADDRESS_PREFIX + gu8_Curr_X_Address);
    1968:	88 eb       	ldi	r24, 0xB8	; 184
    196a:	8c 0f       	add	r24, r28
    196c:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
		gu8_Curr_Y_Address = 0;
    1970:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <gu8_Curr_Y_Address>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
    1974:	80 e4       	ldi	r24, 0x40	; 64
    1976:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
	}
}
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

Disassembly of section .text.GLCD_ClearDisplay:

0000176c <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    1770:	d0 e0       	ldi	r29, 0x00	; 0
    1772:	13 c0       	rjmp	.+38     	; 0x179a <GLCD_ClearDisplay+0x2e>
		GLCD_GoToLine(Line);
    1774:	8d 2f       	mov	r24, r29
    1776:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_PAGES);
    177a:	83 e0       	ldi	r24, 0x03	; 3
    177c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GLCD_SelectPage>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    1780:	c0 e0       	ldi	r28, 0x00	; 0
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <GLCD_ClearDisplay+0x28>
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
    1784:	80 e4       	ldi	r24, 0x40	; 64
    1786:	8c 0f       	add	r24, r28
    1788:	0e 94 20 0c 	call	0x1840	; 0x1840 <GLCD_SendInstruction>
			GLCD_SendData(0);
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	0e 94 40 0c 	call	0x1880	; 0x1880 <GLCD_SendData>

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_PAGES);
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
    1792:	cf 5f       	subi	r28, 0xFF	; 255
    1794:	c0 34       	cpi	r28, 0x40	; 64
    1796:	b0 f3       	brcs	.-20     	; 0x1784 <GLCD_ClearDisplay+0x18>
		GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + gu8_Curr_Y_Address);
	}
}

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
    1798:	df 5f       	subi	r29, 0xFF	; 255
    179a:	d8 30       	cpi	r29, 0x08	; 8
    179c:	58 f3       	brcs	.-42     	; 0x1774 <GLCD_ClearDisplay+0x8>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SET_Y_ADDRESS_PREFIX + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
    179e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GLCD_SelectPage>
	gu8_Curr_Page = 0;
    17a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <gu8_Curr_Page>
	GLCD_GoToLine(0);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	0e 94 ab 0c 	call	0x1956	; 0x1956 <GLCD_GoToLine>
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	08 95       	ret

Disassembly of section .text.main:

00001610 <main>:
#include "PWM_Drawer.h"

#include <util/delay.h>

int main(void)
{
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	61 97       	sbiw	r28, 0x11	; 17
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
    1624:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <PWMDrawer_Init>
	PWMDrawer_SignalAttributesType Signal_Data = {0, 0, 0, 0, 0};
    1628:	fe 01       	movw	r30, r28
    162a:	31 96       	adiw	r30, 0x01	; 1
    162c:	81 e1       	ldi	r24, 0x11	; 17
    162e:	df 01       	movw	r26, r30
    1630:	1d 92       	st	X+, r1
    1632:	8a 95       	dec	r24
    1634:	e9 f7       	brne	.-6      	; 0x1630 <main+0x20>
	float32 Scale_ms = 0.25;
    while(1)
    {
        //TODO:: Please write your application code 
		PWMDrawer_MeasureSignal(&Signal_Data);
    1636:	ce 01       	movw	r24, r28
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <PWMDrawer_MeasureSignal>
		Scale_ms = (Signal_Data.Period_Time_ms) / 5;
    163e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1640:	7b 85       	ldd	r23, Y+11	; 0x0b
    1642:	8c 85       	ldd	r24, Y+12	; 0x0c
    1644:	9d 85       	ldd	r25, Y+13	; 0x0d
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 ea       	ldi	r20, 0xA0	; 160
    164c:	50 e4       	ldi	r21, 0x40	; 64
    164e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
    1652:	ab 01       	movw	r20, r22
    1654:	bc 01       	movw	r22, r24
		PWMDrawer_DrawSignal(&Signal_Data, Scale_ms);
    1656:	ce 01       	movw	r24, r28
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <PWMDrawer_DrawSignal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    165e:	bf ef       	ldi	r27, 0xFF	; 255
    1660:	21 ee       	ldi	r18, 0xE1	; 225
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	b1 50       	subi	r27, 0x01	; 1
    1666:	20 40       	sbci	r18, 0x00	; 0
    1668:	80 40       	sbci	r24, 0x00	; 0
    166a:	e1 f7       	brne	.-8      	; 0x1664 <main+0x54>
    166c:	00 c0       	rjmp	.+0      	; 0x166e <main+0x5e>
    166e:	00 00       	nop
    1670:	e2 cf       	rjmp	.-60     	; 0x1636 <main+0x26>

Disassembly of section .text.DIO_ObtainRegister:

000012f0 <DIO_ObtainRegister>:
DIO_StateType DIO_ReadPin(DIO_PortType Port, DIO_PinType Pin) {
	DIO_StateType eLocal_State = DIO_LOW;
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
	eLocal_State = READ_BIT(*Reg_Ptr, Pin);
	return eLocal_State;
}
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a9 f0       	breq	.+42     	; 0x131e <DIO_ObtainRegister+0x2e>
    12f4:	28 f0       	brcs	.+10     	; 0x1300 <DIO_ObtainRegister+0x10>
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	09 f1       	breq	.+66     	; 0x133c <DIO_ObtainRegister+0x4c>
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	71 f1       	breq	.+92     	; 0x135a <DIO_ObtainRegister+0x6a>
    12fe:	3c c0       	rjmp	.+120    	; 0x1378 <DIO_ObtainRegister+0x88>
    1300:	61 30       	cpi	r22, 0x01	; 1
    1302:	e9 f1       	breq	.+122    	; 0x137e <DIO_ObtainRegister+0x8e>
    1304:	18 f0       	brcs	.+6      	; 0x130c <DIO_ObtainRegister+0x1c>
    1306:	62 30       	cpi	r22, 0x02	; 2
    1308:	39 f0       	breq	.+14     	; 0x1318 <DIO_ObtainRegister+0x28>
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <DIO_ObtainRegister+0x22>
    130c:	8a e3       	ldi	r24, 0x3A	; 58
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	08 95       	ret
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	08 95       	ret
    1318:	89 e3       	ldi	r24, 0x39	; 57
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	08 95       	ret
    131e:	61 30       	cpi	r22, 0x01	; 1
    1320:	89 f1       	breq	.+98     	; 0x1384 <DIO_ObtainRegister+0x94>
    1322:	18 f0       	brcs	.+6      	; 0x132a <DIO_ObtainRegister+0x3a>
    1324:	62 30       	cpi	r22, 0x02	; 2
    1326:	39 f0       	breq	.+14     	; 0x1336 <DIO_ObtainRegister+0x46>
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <DIO_ObtainRegister+0x40>
    132a:	87 e3       	ldi	r24, 0x37	; 55
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	08 95       	ret
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	08 95       	ret
    1336:	86 e3       	ldi	r24, 0x36	; 54
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	08 95       	ret
    133c:	61 30       	cpi	r22, 0x01	; 1
    133e:	29 f1       	breq	.+74     	; 0x138a <DIO_ObtainRegister+0x9a>
    1340:	18 f0       	brcs	.+6      	; 0x1348 <DIO_ObtainRegister+0x58>
    1342:	62 30       	cpi	r22, 0x02	; 2
    1344:	39 f0       	breq	.+14     	; 0x1354 <DIO_ObtainRegister+0x64>
    1346:	03 c0       	rjmp	.+6      	; 0x134e <DIO_ObtainRegister+0x5e>
    1348:	84 e3       	ldi	r24, 0x34	; 52
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	08 95       	ret
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	08 95       	ret
    1354:	83 e3       	ldi	r24, 0x33	; 51
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	08 95       	ret
    135a:	61 30       	cpi	r22, 0x01	; 1
    135c:	c9 f0       	breq	.+50     	; 0x1390 <DIO_ObtainRegister+0xa0>
    135e:	18 f0       	brcs	.+6      	; 0x1366 <DIO_ObtainRegister+0x76>
    1360:	62 30       	cpi	r22, 0x02	; 2
    1362:	39 f0       	breq	.+14     	; 0x1372 <DIO_ObtainRegister+0x82>
    1364:	03 c0       	rjmp	.+6      	; 0x136c <DIO_ObtainRegister+0x7c>
    1366:	81 e3       	ldi	r24, 0x31	; 49
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	08 95       	ret
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	08 95       	ret
    1372:	80 e3       	ldi	r24, 0x30	; 48
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	08 95       	ret
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	08 95       	ret
    137e:	8b e3       	ldi	r24, 0x3B	; 59
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	08 95       	ret
    1384:	88 e3       	ldi	r24, 0x38	; 56
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	08 95       	ret
    138a:	85 e3       	ldi	r24, 0x35	; 53
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	08 95       	ret
    1390:	82 e3       	ldi	r24, 0x32	; 50
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

000016d0 <DIO_SetPinDirection>:
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	d6 2f       	mov	r29, r22
    16d6:	c4 2f       	mov	r28, r20
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DIO_ObtainRegister>
    16de:	cc 23       	and	r28, r28
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <DIO_SetPinDirection+0x18>
    16e2:	c1 30       	cpi	r28, 0x01	; 1
    16e4:	71 f0       	breq	.+28     	; 0x1702 <DIO_SetPinDirection+0x32>
    16e6:	18 c0       	rjmp	.+48     	; 0x1718 <DIO_SetPinDirection+0x48>
    16e8:	fc 01       	movw	r30, r24
    16ea:	40 81       	ld	r20, Z
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_SetPinDirection+0x26>
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	da 95       	dec	r29
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_SetPinDirection+0x22>
    16fa:	20 95       	com	r18
    16fc:	24 23       	and	r18, r20
    16fe:	20 83       	st	Z, r18
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <DIO_SetPinDirection+0x48>
    1702:	fc 01       	movw	r30, r24
    1704:	40 81       	ld	r20, Z
    1706:	21 e0       	ldi	r18, 0x01	; 1
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_SetPinDirection+0x40>
    170c:	22 0f       	add	r18, r18
    170e:	33 1f       	adc	r19, r19
    1710:	da 95       	dec	r29
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_SetPinDirection+0x3c>
    1714:	24 2b       	or	r18, r20
    1716:	20 83       	st	Z, r18
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

Disassembly of section .text.DIO_WritePin:

0000171e <DIO_WritePin>:
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	d6 2f       	mov	r29, r22
    1724:	c4 2f       	mov	r28, r20
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DIO_ObtainRegister>
    172c:	cc 23       	and	r28, r28
    172e:	19 f0       	breq	.+6      	; 0x1736 <DIO_WritePin+0x18>
    1730:	c1 30       	cpi	r28, 0x01	; 1
    1732:	71 f0       	breq	.+28     	; 0x1750 <DIO_WritePin+0x32>
    1734:	18 c0       	rjmp	.+48     	; 0x1766 <DIO_WritePin+0x48>
    1736:	fc 01       	movw	r30, r24
    1738:	40 81       	ld	r20, Z
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_WritePin+0x26>
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	da 95       	dec	r29
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_WritePin+0x22>
    1748:	20 95       	com	r18
    174a:	24 23       	and	r18, r20
    174c:	20 83       	st	Z, r18
    174e:	0b c0       	rjmp	.+22     	; 0x1766 <DIO_WritePin+0x48>
    1750:	fc 01       	movw	r30, r24
    1752:	40 81       	ld	r20, Z
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_WritePin+0x40>
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	da 95       	dec	r29
    1760:	e2 f7       	brpl	.-8      	; 0x175a <DIO_WritePin+0x3c>
    1762:	24 2b       	or	r18, r20
    1764:	20 83       	st	Z, r18
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

Disassembly of section .text.DIO_SetPortDirection:

0000197e <DIO_SetPortDirection>:


void DIO_SetPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
    197e:	cf 93       	push	r28
    1980:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DIO_ObtainRegister>
	switch (Direction) {
    1988:	cc 23       	and	r28, r28
    198a:	19 f0       	breq	.+6      	; 0x1992 <DIO_SetPortDirection+0x14>
    198c:	c1 30       	cpi	r28, 0x01	; 1
    198e:	21 f0       	breq	.+8      	; 0x1998 <DIO_SetPortDirection+0x1a>
    1990:	06 c0       	rjmp	.+12     	; 0x199e <DIO_SetPortDirection+0x20>
		case DIO_INPUT: *Reg_Ptr = 0x00U; break;
    1992:	fc 01       	movw	r30, r24
    1994:	10 82       	st	Z, r1
    1996:	03 c0       	rjmp	.+6      	; 0x199e <DIO_SetPortDirection+0x20>
		case DIO_OUTPUT: *Reg_Ptr = 0xFFU; break;
    1998:	2f ef       	ldi	r18, 0xFF	; 255
    199a:	fc 01       	movw	r30, r24
    199c:	20 83       	st	Z, r18
		default: break;
	}
}
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

Disassembly of section .text.DIO_WritePort:

00001ad2 <DIO_WritePort>:

void DIO_WritePort(DIO_PortType Port, uint8 Value) {
    1ad2:	cf 93       	push	r28
    1ad4:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
    1ad6:	61 e0       	ldi	r22, 0x01	; 1
    1ad8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <DIO_ObtainRegister>
	*Reg_Ptr = Value;
    1adc:	fc 01       	movw	r30, r24
    1ade:	c0 83       	st	Z, r28
}
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

Disassembly of section .text.ICU_SetTriggerEdge:

00001a74 <ICU_SetTriggerEdge>:
		default: break;
	}
}

void ICU_SetTriggerEdge(ICU_TimerChannelType Tmr_Channel, ICU_TriggerEdgeType Edge) {
	CLEAR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
    1a74:	9e b5       	in	r25, 0x2e	; 46
    1a76:	9f 7b       	andi	r25, 0xBF	; 191
    1a78:	9e bd       	out	0x2e, r25	; 46
	switch (Tmr_Channel) {
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <ICU_SetTriggerEdge+0x18>
		case ICU_TIMER_1: *TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT); break;
    1a7e:	8e b5       	in	r24, 0x2e	; 46
    1a80:	90 e4       	ldi	r25, 0x40	; 64
    1a82:	69 9f       	mul	r22, r25
    1a84:	b0 01       	movw	r22, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	68 2b       	or	r22, r24
    1a8a:	6e bd       	out	0x2e, r22	; 46
    1a8c:	08 95       	ret

Disassembly of section .text.ICU_ClearTimerValue:

00001b72 <ICU_ClearTimerValue>:
		default: break;
	}
}

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
    1b72:	81 11       	cpse	r24, r1
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <ICU_ClearTimerValue+0x8>
		case ICU_TIMER_1: *(uint16*)TIMER1_CNTR_REG_L = 0x0000U; break;
    1b76:	1d bc       	out	0x2d, r1	; 45
    1b78:	1c bc       	out	0x2c, r1	; 44
    1b7a:	08 95       	ret

Disassembly of section .text.ICU_GetInputCaptureValue:

00001ae4 <ICU_GetInputCaptureValue>:
	}
}

uint16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
	uint16 u16Local_Value = 0U;
	switch (Tmr_Channel) {
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <ICU_GetInputCaptureValue+0xa>
		case ICU_TIMER_1: u16Local_Value = (*(uint16*)TIMER1_INP_CAPT_REG_L);
    1ae8:	86 b5       	in	r24, 0x26	; 38
    1aea:	97 b5       	in	r25, 0x27	; 39
    1aec:	08 95       	ret
		default: break;
	}
}

uint16 ICU_GetInputCaptureValue(ICU_TimerChannelType Tmr_Channel) {
	uint16 u16Local_Value = 0U;
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
	switch (Tmr_Channel) {
		case ICU_TIMER_1: u16Local_Value = (*(uint16*)TIMER1_INP_CAPT_REG_L);
		default: break;
	}
	return u16Local_Value;
}
    1af2:	08 95       	ret

Disassembly of section .text.ICU_GetStatus:

00001a3e <ICU_GetStatus>:

ICU_StatusType ICU_GetStatus(ICU_TimerChannelType Tmr_Channel) {
	switch (Tmr_Channel) {
    1a3e:	81 11       	cpse	r24, r1
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <ICU_GetStatus+0x14>
		case ICU_TIMER_1: 
			if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
    1a42:	08 b6       	in	r0, 0x38	; 56
    1a44:	05 fe       	sbrs	r0, 5
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <ICU_GetStatus+0x18>
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
    1a48:	88 b7       	in	r24, 0x38	; 56
    1a4a:	80 62       	ori	r24, 0x20	; 32
    1a4c:	88 bf       	out	0x38, r24	; 56
				return ICU_EVENT_CATURED;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	08 95       	ret
			} else {
				return ICU_RUNNING;
			}
		default: break;
	}
	return ICU_RUNNING;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	08 95       	ret
		case ICU_TIMER_1: 
			if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
				SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
				return ICU_EVENT_CATURED;
			} else {
				return ICU_RUNNING;
    1a56:	80 e0       	ldi	r24, 0x00	; 0
			}
		default: break;
	}
	return ICU_RUNNING;
}
    1a58:	08 95       	ret

Disassembly of section .text.ICU_InitTimer1:

00001530 <ICU_InitTimer1>:
}

/************************************************************************/
/*					Private Functions Implementations                   */
/************************************************************************/
void ICU_InitTimer1(const ICU_ConfigurationType* Config_Ptr) {
    1530:	cf 92       	push	r12
    1532:	df 92       	push	r13
    1534:	ef 92       	push	r14
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	CLEAR_BIT(*PORTD_DIR_REG, 6U);
    1536:	91 b3       	in	r25, 0x11	; 17
    1538:	9f 7b       	andi	r25, 0xBF	; 191
    153a:	91 bb       	out	0x11, r25	; 17
	/* Clear Configurations on TCCR1A and TCCR1B */
	*TIMER1_CTRL_REG_A = 0x00U;
    153c:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
    153e:	1e bc       	out	0x2e, r1	; 46
	/* Timer 1 mode is set to normal */
	/* Set Prescaler */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
    1540:	5e b5       	in	r21, 0x2e	; 46
    1542:	9b 01       	movw	r18, r22
    1544:	48 2f       	mov	r20, r24
    1546:	2f 5f       	subi	r18, 0xFF	; 255
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	4f 4f       	sbci	r20, 0xFF	; 255
    154c:	f9 01       	movw	r30, r18
    154e:	94 91       	lpm	r25, Z
    1550:	47 fd       	sbrc	r20, 7
    1552:	90 81       	ld	r25, Z
    1554:	95 2b       	or	r25, r21
    1556:	9e bd       	out	0x2e, r25	; 46
	/* Set Trigger Edge (Falling or Rising) */
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
    1558:	4e b5       	in	r20, 0x2e	; 46
    155a:	6b 01       	movw	r12, r22
    155c:	e8 2e       	mov	r14, r24
    155e:	32 e0       	ldi	r19, 0x02	; 2
    1560:	c3 0e       	add	r12, r19
    1562:	d1 1c       	adc	r13, r1
    1564:	e1 1c       	adc	r14, r1
    1566:	f6 01       	movw	r30, r12
    1568:	94 91       	lpm	r25, Z
    156a:	e7 fc       	sbrc	r14, 7
    156c:	90 81       	ld	r25, Z
    156e:	50 e4       	ldi	r21, 0x40	; 64
    1570:	95 9f       	mul	r25, r21
    1572:	90 01       	movw	r18, r0
    1574:	11 24       	eor	r1, r1
    1576:	24 2b       	or	r18, r20
    1578:	2e bd       	out	0x2e, r18	; 46
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
    157a:	29 b7       	in	r18, 0x39	; 57
    157c:	a8 2f       	mov	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	03 96       	adiw	r24, 0x03	; 3
    1582:	a1 1d       	adc	r26, r1
    1584:	fc 01       	movw	r30, r24
    1586:	94 91       	lpm	r25, Z
    1588:	a7 fd       	sbrc	r26, 7
    158a:	90 81       	ld	r25, Z
    158c:	30 e2       	ldi	r19, 0x20	; 32
    158e:	93 9f       	mul	r25, r19
    1590:	c0 01       	movw	r24, r0
    1592:	11 24       	eor	r1, r1
    1594:	82 2b       	or	r24, r18
    1596:	89 bf       	out	0x39, r24	; 57
	/* Clear Timer 1 and ICR Values */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
    1598:	1d bc       	out	0x2d, r1	; 45
    159a:	1c bc       	out	0x2c, r1	; 44
	*(uint16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
    159c:	17 bc       	out	0x27, r1	; 39
    159e:	16 bc       	out	0x26, r1	; 38
}
    15a0:	ef 90       	pop	r14
    15a2:	df 90       	pop	r13
    15a4:	cf 90       	pop	r12
    15a6:	08 95       	ret

Disassembly of section .text.ICU_Init:

00001abe <ICU_Init>:

/************************************************************************/
/*					Functions Implementations                           */
/************************************************************************/
void ICU_Init(const ICU_ConfigurationType* Config_Ptr) {
	switch (Config_Ptr->Tmr_Channel) {
    1abe:	e6 2f       	mov	r30, r22
    1ac0:	f7 2f       	mov	r31, r23
    1ac2:	94 91       	lpm	r25, Z
    1ac4:	87 fd       	sbrc	r24, 7
    1ac6:	90 81       	ld	r25, Z
    1ac8:	91 11       	cpse	r25, r1
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <ICU_Init+0x12>
		case ICU_TIMER_1: ICU_InitTimer1(Config_Ptr); break;
    1acc:	0e 94 98 0a 	call	0x1530	; 0x1530 <ICU_InitTimer1>
    1ad0:	08 95       	ret

Disassembly of section .text.ICU_GetDutyCycle_Timer1:

00000aae <ICU_GetDutyCycle_Timer1>:
	/* Clear Timer 1 and ICR Values */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
	*(uint16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
}

void ICU_GetDutyCycle_Timer1(uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
 aae:	4f 92       	push	r4
 ab0:	5f 92       	push	r5
 ab2:	6f 92       	push	r6
 ab4:	7f 92       	push	r7
 ab6:	8f 92       	push	r8
 ab8:	9f 92       	push	r9
 aba:	af 92       	push	r10
 abc:	bf 92       	push	r11
 abe:	cf 92       	push	r12
 ac0:	df 92       	push	r13
 ac2:	ef 92       	push	r14
 ac4:	ff 92       	push	r15
 ac6:	0f 93       	push	r16
 ac8:	1f 93       	push	r17
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	ec 01       	movw	r28, r24
 ad0:	8b 01       	movw	r16, r22
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
 ad2:	88 b7       	in	r24, 0x38	; 56
 ad4:	80 62       	ori	r24, 0x20	; 32
 ad6:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
 ad8:	61 e0       	ldi	r22, 0x01	; 1
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <ICU_SetTriggerEdge>
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
 ae0:	80 e0       	ldi	r24, 0x00	; 0
 ae2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <ICU_GetStatus>
 ae6:	88 23       	and	r24, r24
 ae8:	d9 f3       	breq	.-10     	; 0xae0 <ICU_GetDutyCycle_Timer1+0x32>
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	80 e0       	ldi	r24, 0x00	; 0
 aee:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
 af8:	88 b7       	in	r24, 0x38	; 56
 afa:	80 62       	ori	r24, 0x20	; 32
 afc:	88 bf       	out	0x38, r24	; 56
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
 afe:	c1 2c       	mov	r12, r1
 b00:	d1 2c       	mov	r13, r1
 b02:	76 01       	movw	r14, r12
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
 b04:	09 c0       	rjmp	.+18     	; 0xb18 <ICU_GetDutyCycle_Timer1+0x6a>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
 b06:	08 b6       	in	r0, 0x38	; 56
 b08:	02 fe       	sbrs	r0, 2
 b0a:	06 c0       	rjmp	.+12     	; 0xb18 <ICU_GetDutyCycle_Timer1+0x6a>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
 b0c:	88 b7       	in	r24, 0x38	; 56
 b0e:	84 60       	ori	r24, 0x04	; 4
 b10:	88 bf       	out	0x38, r24	; 56
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	e8 1a       	sub	r14, r24
 b16:	f8 0a       	sbc	r15, r24
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <ICU_GetStatus>
 b1e:	88 23       	and	r24, r24
 b20:	91 f3       	breq	.-28     	; 0xb06 <ICU_GetDutyCycle_Timer1+0x58>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetInputCaptureValue(ICU_TIMER_1);
 b22:	80 e0       	ldi	r24, 0x00	; 0
 b24:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ICU_GetInputCaptureValue>
 b28:	c8 0e       	add	r12, r24
 b2a:	d9 1e       	adc	r13, r25
 b2c:	e1 1c       	adc	r14, r1
 b2e:	f1 1c       	adc	r15, r1

	uint32 u32Local_OFF_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
 b30:	61 e0       	ldi	r22, 0x01	; 1
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
 b3e:	88 b7       	in	r24, 0x38	; 56
 b40:	80 62       	ori	r24, 0x20	; 32
 b42:	88 bf       	out	0x38, r24	; 56
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
 b44:	06 c0       	rjmp	.+12     	; 0xb52 <ICU_GetDutyCycle_Timer1+0xa4>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
 b46:	08 b6       	in	r0, 0x38	; 56
 b48:	02 fe       	sbrs	r0, 2
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <ICU_GetDutyCycle_Timer1+0xa4>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
 b4c:	88 b7       	in	r24, 0x38	; 56
 b4e:	84 60       	ori	r24, 0x04	; 4
 b50:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <ICU_GetStatus>
 b58:	88 23       	and	r24, r24
 b5a:	a9 f3       	breq	.-22     	; 0xb46 <ICU_GetDutyCycle_Timer1+0x98>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ICU_GetInputCaptureValue>
 b62:	4c 01       	movw	r8, r24
 b64:	a1 2c       	mov	r10, r1
 b66:	b1 2c       	mov	r11, r1

	/* Set counts */
	//strLocal_Duty.High_Time = u32Local_ON_Counts;
	//strLocal_Duty.Period_Time = u32Local_ON_Counts + u32Local_OFF_Counts;
	/* Convert these into milliseconds */
	Duty_Ptr->High_Time = (float32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
 b68:	2e 01       	movw	r4, r28
 b6a:	61 2c       	mov	r6, r1
 b6c:	71 2c       	mov	r7, r1
 b6e:	a7 01       	movw	r20, r14
 b70:	96 01       	movw	r18, r12
 b72:	c3 01       	movw	r24, r6
 b74:	b2 01       	movw	r22, r4
 b76:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsi3>
 b7a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 b7e:	20 e0       	ldi	r18, 0x00	; 0
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	4a e7       	ldi	r20, 0x7A	; 122
 b84:	54 e4       	ldi	r21, 0x44	; 68
 b86:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 b8a:	20 e0       	ldi	r18, 0x00	; 0
 b8c:	34 e2       	ldi	r19, 0x24	; 36
 b8e:	44 e7       	ldi	r20, 0x74	; 116
 b90:	5b e4       	ldi	r21, 0x4B	; 75
 b92:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 b96:	f8 01       	movw	r30, r16
 b98:	60 83       	st	Z, r22
 b9a:	71 83       	std	Z+1, r23	; 0x01
 b9c:	82 83       	std	Z+2, r24	; 0x02
 b9e:	93 83       	std	Z+3, r25	; 0x03
	Duty_Ptr->Period_Time = (float32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
 ba0:	c7 01       	movw	r24, r14
 ba2:	b6 01       	movw	r22, r12
 ba4:	68 0d       	add	r22, r8
 ba6:	79 1d       	adc	r23, r9
 ba8:	8a 1d       	adc	r24, r10
 baa:	9b 1d       	adc	r25, r11
 bac:	a3 01       	movw	r20, r6
 bae:	92 01       	movw	r18, r4
 bb0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsi3>
 bb4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 bb8:	20 e0       	ldi	r18, 0x00	; 0
 bba:	30 e0       	ldi	r19, 0x00	; 0
 bbc:	4a e7       	ldi	r20, 0x7A	; 122
 bbe:	54 e4       	ldi	r21, 0x44	; 68
 bc0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 bc4:	20 e0       	ldi	r18, 0x00	; 0
 bc6:	34 e2       	ldi	r19, 0x24	; 36
 bc8:	44 e7       	ldi	r20, 0x74	; 116
 bca:	5b e4       	ldi	r21, 0x4B	; 75
 bcc:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 bd0:	f8 01       	movw	r30, r16
 bd2:	64 83       	std	Z+4, r22	; 0x04
 bd4:	75 83       	std	Z+5, r23	; 0x05
 bd6:	86 83       	std	Z+6, r24	; 0x06
 bd8:	97 83       	std	Z+7, r25	; 0x07
}
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	1f 91       	pop	r17
 be0:	0f 91       	pop	r16
 be2:	ff 90       	pop	r15
 be4:	ef 90       	pop	r14
 be6:	df 90       	pop	r13
 be8:	cf 90       	pop	r12
 bea:	bf 90       	pop	r11
 bec:	af 90       	pop	r10
 bee:	9f 90       	pop	r9
 bf0:	8f 90       	pop	r8
 bf2:	7f 90       	pop	r7
 bf4:	6f 90       	pop	r6
 bf6:	5f 90       	pop	r5
 bf8:	4f 90       	pop	r4
 bfa:	08 95       	ret

Disassembly of section .text.ICU_GetDutyCycle:

00001b14 <ICU_GetDutyCycle>:
	}
	return ICU_RUNNING;
}

void ICU_GetDutyCycle(ICU_TimerChannelType Tmr_Channel, uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
	switch (Tmr_Channel) {
    1b14:	81 11       	cpse	r24, r1
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <ICU_GetDutyCycle+0xc>
    1b18:	cb 01       	movw	r24, r22
		case ICU_TIMER_1:
			ICU_GetDutyCycle_Timer1(Prescale_Value, Duty_Ptr);
    1b1a:	ba 01       	movw	r22, r20
    1b1c:	0e 94 57 05 	call	0xaae	; 0xaae <ICU_GetDutyCycle_Timer1>
    1b20:	08 95       	ret

Disassembly of section .text.PWM_InitTimer0:

00000bfc <PWM_InitTimer0>:
}

/************************************************************************/
/*				Private Functions Implementations                       */
/************************************************************************/
void PWM_InitTimer0(const PWM_ConfigurationType* Config_Ptr) {
 bfc:	cf 92       	push	r12
 bfe:	df 92       	push	r13
 c00:	ef 92       	push	r14
 c02:	a8 2f       	mov	r26, r24
 c04:	cb 01       	movw	r24, r22
	/* Make PB3=OC0 as output */
	// DIO_SetPinDirection(DIO_PORT_B, DIO_PIN_3, DIO_OUTPUT);
	SET_BIT(*PORTB_DIR_REG, 3U);
 c06:	27 b3       	in	r18, 0x17	; 23
 c08:	28 60       	ori	r18, 0x08	; 8
 c0a:	27 bb       	out	0x17, r18	; 23
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
 c0c:	13 be       	out	0x33, r1	; 51
	/* Set PWM Mode */
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
 c0e:	23 b7       	in	r18, 0x33	; 51
 c10:	6c 01       	movw	r12, r24
 c12:	ea 2e       	mov	r14, r26
 c14:	3f ef       	ldi	r19, 0xFF	; 255
 c16:	c3 1a       	sub	r12, r19
 c18:	d3 0a       	sbc	r13, r19
 c1a:	e3 0a       	sbc	r14, r19
 c1c:	f6 01       	movw	r30, r12
 c1e:	34 91       	lpm	r19, Z
 c20:	e7 fc       	sbrc	r14, 7
 c22:	30 81       	ld	r19, Z
 c24:	33 0f       	add	r19, r19
 c26:	33 0f       	add	r19, r19
 c28:	33 0f       	add	r19, r19
 c2a:	23 2b       	or	r18, r19
 c2c:	20 64       	ori	r18, 0x40	; 64
 c2e:	23 bf       	out	0x33, r18	; 51
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
 c30:	23 b7       	in	r18, 0x33	; 51
 c32:	6c 01       	movw	r12, r24
 c34:	ea 2e       	mov	r14, r26
 c36:	33 e0       	ldi	r19, 0x03	; 3
 c38:	c3 0e       	add	r12, r19
 c3a:	d1 1c       	adc	r13, r1
 c3c:	e1 1c       	adc	r14, r1
 c3e:	f6 01       	movw	r30, r12
 c40:	34 91       	lpm	r19, Z
 c42:	e7 fc       	sbrc	r14, 7
 c44:	30 81       	ld	r19, Z
 c46:	32 95       	swap	r19
 c48:	30 7f       	andi	r19, 0xF0	; 240
 c4a:	23 2b       	or	r18, r19
 c4c:	20 62       	ori	r18, 0x20	; 32
 c4e:	23 bf       	out	0x33, r18	; 51
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
 c50:	9c 01       	movw	r18, r24
 c52:	4a 2f       	mov	r20, r26
 c54:	2e 5f       	subi	r18, 0xFE	; 254
 c56:	3f 4f       	sbci	r19, 0xFF	; 255
 c58:	4f 4f       	sbci	r20, 0xFF	; 255
 c5a:	f9 01       	movw	r30, r18
 c5c:	24 91       	lpm	r18, Z
 c5e:	47 fd       	sbrc	r20, 7
 c60:	20 81       	ld	r18, Z
 c62:	24 30       	cpi	r18, 0x04	; 4
 c64:	69 f0       	breq	.+26     	; 0xc80 <PWM_InitTimer0+0x84>
 c66:	18 f4       	brcc	.+6      	; 0xc6e <PWM_InitTimer0+0x72>
 c68:	23 30       	cpi	r18, 0x03	; 3
 c6a:	30 f0       	brcs	.+12     	; 0xc78 <PWM_InitTimer0+0x7c>
 c6c:	12 c0       	rjmp	.+36     	; 0xc92 <PWM_InitTimer0+0x96>
 c6e:	3a ef       	ldi	r19, 0xFA	; 250
 c70:	32 0f       	add	r19, r18
 c72:	34 30       	cpi	r19, 0x04	; 4
 c74:	50 f0       	brcs	.+20     	; 0xc8a <PWM_InitTimer0+0x8e>
 c76:	0d c0       	rjmp	.+26     	; 0xc92 <PWM_InitTimer0+0x96>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
			*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
 c78:	33 b7       	in	r19, 0x33	; 51
 c7a:	23 2b       	or	r18, r19
 c7c:	23 bf       	out	0x33, r18	; 51
 c7e:	09 c0       	rjmp	.+18     	; 0xc92 <PWM_InitTimer0+0x96>
		case PWM_PRESCALE_64:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
 c80:	33 b7       	in	r19, 0x33	; 51
 c82:	21 50       	subi	r18, 0x01	; 1
 c84:	23 2b       	or	r18, r19
 c86:	23 bf       	out	0x33, r18	; 51
 c88:	04 c0       	rjmp	.+8      	; 0xc92 <PWM_InitTimer0+0x96>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
			*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
 c8a:	33 b7       	in	r19, 0x33	; 51
 c8c:	22 50       	subi	r18, 0x02	; 2
 c8e:	23 2b       	or	r18, r19
 c90:	23 bf       	out	0x33, r18	; 51
		default: break;
	}
	/* Set Duty Value in OCR0 Register */
	*TIMER0_CMP_REG = 0x00U;
 c92:	1c be       	out	0x3c, r1	; 60
	switch (Config_Ptr->State) {
 c94:	9c 01       	movw	r18, r24
 c96:	4a 2f       	mov	r20, r26
 c98:	2d 5f       	subi	r18, 0xFD	; 253
 c9a:	3f 4f       	sbci	r19, 0xFF	; 255
 c9c:	4f 4f       	sbci	r20, 0xFF	; 255
 c9e:	f9 01       	movw	r30, r18
 ca0:	24 91       	lpm	r18, Z
 ca2:	47 fd       	sbrc	r20, 7
 ca4:	20 81       	ld	r18, Z
 ca6:	22 23       	and	r18, r18
 ca8:	19 f0       	breq	.+6      	; 0xcb0 <PWM_InitTimer0+0xb4>
 caa:	21 30       	cpi	r18, 0x01	; 1
 cac:	c9 f0       	breq	.+50     	; 0xce0 <PWM_InitTimer0+0xe4>
 cae:	3a c0       	rjmp	.+116    	; 0xd24 <PWM_InitTimer0+0x128>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
 cb0:	08 96       	adiw	r24, 0x08	; 8
 cb2:	a1 1d       	adc	r26, r1
 cb4:	fc 01       	movw	r30, r24
 cb6:	64 91       	lpm	r22, Z
 cb8:	a7 fd       	sbrc	r26, 7
 cba:	60 81       	ld	r22, Z
 cbc:	8f ef       	ldi	r24, 0xFF	; 255
 cbe:	68 9f       	mul	r22, r24
 cc0:	b0 01       	movw	r22, r0
 cc2:	11 24       	eor	r1, r1
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 ccc:	20 e0       	ldi	r18, 0x00	; 0
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	48 ec       	ldi	r20, 0xC8	; 200
 cd2:	52 e4       	ldi	r21, 0x42	; 66
 cd4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 cd8:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 cdc:	6c bf       	out	0x3c, r22	; 60
 cde:	22 c0       	rjmp	.+68     	; 0xd24 <PWM_InitTimer0+0x128>
		case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
 ce0:	08 96       	adiw	r24, 0x08	; 8
 ce2:	a1 1d       	adc	r26, r1
 ce4:	fc 01       	movw	r30, r24
 ce6:	64 91       	lpm	r22, Z
 ce8:	a7 fd       	sbrc	r26, 7
 cea:	60 81       	ld	r22, Z
 cec:	70 e0       	ldi	r23, 0x00	; 0
 cee:	80 e0       	ldi	r24, 0x00	; 0
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__floatsisf>
 cf6:	9b 01       	movw	r18, r22
 cf8:	ac 01       	movw	r20, r24
 cfa:	60 e0       	ldi	r22, 0x00	; 0
 cfc:	70 e0       	ldi	r23, 0x00	; 0
 cfe:	88 ec       	ldi	r24, 0xC8	; 200
 d00:	92 e4       	ldi	r25, 0x42	; 66
 d02:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
 d06:	20 e0       	ldi	r18, 0x00	; 0
 d08:	30 e0       	ldi	r19, 0x00	; 0
 d0a:	4f e7       	ldi	r20, 0x7F	; 127
 d0c:	53 e4       	ldi	r21, 0x43	; 67
 d0e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 d12:	20 e0       	ldi	r18, 0x00	; 0
 d14:	30 e0       	ldi	r19, 0x00	; 0
 d16:	48 ec       	ldi	r20, 0xC8	; 200
 d18:	52 e4       	ldi	r21, 0x42	; 66
 d1a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 d1e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 d22:	6c bf       	out	0x3c, r22	; 60
		default: break;
	}
	/* Clear TCNT0 Register Configurations */
	*TIMER0_CNTR_REG = 0x00U;
 d24:	12 be       	out	0x32, r1	; 50
}
 d26:	ef 90       	pop	r14
 d28:	df 90       	pop	r13
 d2a:	cf 90       	pop	r12
 d2c:	08 95       	ret

Disassembly of section .text.PWM_InitTimer1:

000004de <PWM_InitTimer1>:
				default: break;
			}
			break;
		default: break;
	}
}
 4de:	4f 92       	push	r4
 4e0:	5f 92       	push	r5
 4e2:	6f 92       	push	r6
 4e4:	7f 92       	push	r7
 4e6:	8f 92       	push	r8
 4e8:	9f 92       	push	r9
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	6b 01       	movw	r12, r22
 4f6:	e8 2e       	mov	r14, r24
 4f8:	fb 01       	movw	r30, r22
 4fa:	84 91       	lpm	r24, Z
 4fc:	e7 fc       	sbrc	r14, 7
 4fe:	80 81       	ld	r24, Z
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	19 f0       	breq	.+6      	; 0x50a <PWM_InitTimer1+0x2c>
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	29 f0       	breq	.+10     	; 0x512 <PWM_InitTimer1+0x34>
 508:	07 c0       	rjmp	.+14     	; 0x518 <PWM_InitTimer1+0x3a>
 50a:	81 b3       	in	r24, 0x11	; 17
 50c:	80 62       	ori	r24, 0x20	; 32
 50e:	81 bb       	out	0x11, r24	; 17
 510:	03 c0       	rjmp	.+6      	; 0x518 <PWM_InitTimer1+0x3a>
 512:	81 b3       	in	r24, 0x11	; 17
 514:	80 61       	ori	r24, 0x10	; 16
 516:	81 bb       	out	0x11, r24	; 17
 518:	1f bc       	out	0x2f, r1	; 47
 51a:	1e bc       	out	0x2e, r1	; 46
 51c:	8f b5       	in	r24, 0x2f	; 47
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	8f bd       	out	0x2f, r24	; 47
 522:	8e b5       	in	r24, 0x2e	; 46
 524:	4e 2d       	mov	r20, r14
 526:	96 01       	movw	r18, r12
 528:	2f 5f       	subi	r18, 0xFF	; 255
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	4f 4f       	sbci	r20, 0xFF	; 255
 52e:	f9 01       	movw	r30, r18
 530:	94 91       	lpm	r25, Z
 532:	47 fd       	sbrc	r20, 7
 534:	90 81       	ld	r25, Z
 536:	99 0f       	add	r25, r25
 538:	99 0f       	add	r25, r25
 53a:	99 0f       	add	r25, r25
 53c:	89 2b       	or	r24, r25
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	8e bd       	out	0x2e, r24	; 46
 542:	f6 01       	movw	r30, r12
 544:	84 91       	lpm	r24, Z
 546:	e7 fc       	sbrc	r14, 7
 548:	80 81       	ld	r24, Z
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	19 f0       	breq	.+6      	; 0x554 <PWM_InitTimer1+0x76>
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	91 f0       	breq	.+36     	; 0x576 <PWM_InitTimer1+0x98>
 552:	20 c0       	rjmp	.+64     	; 0x594 <PWM_InitTimer1+0xb6>
 554:	8f b5       	in	r24, 0x2f	; 47
 556:	4e 2d       	mov	r20, r14
 558:	96 01       	movw	r18, r12
 55a:	2d 5f       	subi	r18, 0xFD	; 253
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	4f 4f       	sbci	r20, 0xFF	; 255
 560:	f9 01       	movw	r30, r18
 562:	94 91       	lpm	r25, Z
 564:	47 fd       	sbrc	r20, 7
 566:	90 81       	ld	r25, Z
 568:	92 95       	swap	r25
 56a:	99 0f       	add	r25, r25
 56c:	99 0f       	add	r25, r25
 56e:	90 7c       	andi	r25, 0xC0	; 192
 570:	89 2b       	or	r24, r25
 572:	80 68       	ori	r24, 0x80	; 128
 574:	8f bd       	out	0x2f, r24	; 47
 576:	8f b5       	in	r24, 0x2f	; 47
 578:	4e 2d       	mov	r20, r14
 57a:	96 01       	movw	r18, r12
 57c:	2d 5f       	subi	r18, 0xFD	; 253
 57e:	3f 4f       	sbci	r19, 0xFF	; 255
 580:	4f 4f       	sbci	r20, 0xFF	; 255
 582:	f9 01       	movw	r30, r18
 584:	94 91       	lpm	r25, Z
 586:	47 fd       	sbrc	r20, 7
 588:	90 81       	ld	r25, Z
 58a:	92 95       	swap	r25
 58c:	90 7f       	andi	r25, 0xF0	; 240
 58e:	89 2b       	or	r24, r25
 590:	80 62       	ori	r24, 0x20	; 32
 592:	8f bd       	out	0x2f, r24	; 47
 594:	ae 2d       	mov	r26, r14
 596:	c6 01       	movw	r24, r12
 598:	02 96       	adiw	r24, 0x02	; 2
 59a:	a1 1d       	adc	r26, r1
 59c:	fc 01       	movw	r30, r24
 59e:	84 91       	lpm	r24, Z
 5a0:	a7 fd       	sbrc	r26, 7
 5a2:	80 81       	ld	r24, Z
 5a4:	84 30       	cpi	r24, 0x04	; 4
 5a6:	69 f0       	breq	.+26     	; 0x5c2 <PWM_InitTimer1+0xe4>
 5a8:	18 f4       	brcc	.+6      	; 0x5b0 <PWM_InitTimer1+0xd2>
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	30 f0       	brcs	.+12     	; 0x5ba <PWM_InitTimer1+0xdc>
 5ae:	12 c0       	rjmp	.+36     	; 0x5d4 <PWM_InitTimer1+0xf6>
 5b0:	9a ef       	ldi	r25, 0xFA	; 250
 5b2:	98 0f       	add	r25, r24
 5b4:	94 30       	cpi	r25, 0x04	; 4
 5b6:	50 f0       	brcs	.+20     	; 0x5cc <PWM_InitTimer1+0xee>
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <PWM_InitTimer1+0xf6>
 5ba:	9e b5       	in	r25, 0x2e	; 46
 5bc:	89 2b       	or	r24, r25
 5be:	8e bd       	out	0x2e, r24	; 46
 5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <PWM_InitTimer1+0xf6>
 5c2:	9e b5       	in	r25, 0x2e	; 46
 5c4:	81 50       	subi	r24, 0x01	; 1
 5c6:	89 2b       	or	r24, r25
 5c8:	8e bd       	out	0x2e, r24	; 46
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <PWM_InitTimer1+0xf6>
 5cc:	9e b5       	in	r25, 0x2e	; 46
 5ce:	82 50       	subi	r24, 0x02	; 2
 5d0:	89 2b       	or	r24, r25
 5d2:	8e bd       	out	0x2e, r24	; 46
 5d4:	ae 2d       	mov	r26, r14
 5d6:	c6 01       	movw	r24, r12
 5d8:	06 96       	adiw	r24, 0x06	; 6
 5da:	a1 1d       	adc	r26, r1
 5dc:	fc 01       	movw	r30, r24
 5de:	5a 2f       	mov	r21, r26
 5e0:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__xload_2>
 5e4:	db 01       	movw	r26, r22
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	34 e2       	ldi	r19, 0x24	; 36
 5ea:	44 ef       	ldi	r20, 0xF4	; 244
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__muluhisi3>
 5f2:	4b 01       	movw	r8, r22
 5f4:	5c 01       	movw	r10, r24
 5f6:	ae 2d       	mov	r26, r14
 5f8:	c6 01       	movw	r24, r12
 5fa:	04 96       	adiw	r24, 0x04	; 4
 5fc:	a1 1d       	adc	r26, r1
 5fe:	fc 01       	movw	r30, r24
 600:	5a 2f       	mov	r21, r26
 602:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__xload_2>
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 60e:	20 e0       	ldi	r18, 0x00	; 0
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	4a e7       	ldi	r20, 0x7A	; 122
 614:	54 e4       	ldi	r21, 0x44	; 68
 616:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 61a:	2b 01       	movw	r4, r22
 61c:	3c 01       	movw	r6, r24
 61e:	c5 01       	movw	r24, r10
 620:	b4 01       	movw	r22, r8
 622:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 626:	a3 01       	movw	r20, r6
 628:	92 01       	movw	r18, r4
 62a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 62e:	20 e0       	ldi	r18, 0x00	; 0
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	40 e8       	ldi	r20, 0x80	; 128
 634:	5f e3       	ldi	r21, 0x3F	; 63
 636:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
 63a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 63e:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 642:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 646:	77 bd       	out	0x27, r23	; 39
 648:	66 bd       	out	0x26, r22	; 38
 64a:	f6 01       	movw	r30, r12
 64c:	84 91       	lpm	r24, Z
 64e:	e7 fc       	sbrc	r14, 7
 650:	80 81       	ld	r24, Z
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	21 f0       	breq	.+8      	; 0x65e <PWM_InitTimer1+0x180>
 656:	82 30       	cpi	r24, 0x02	; 2
 658:	09 f4       	brne	.+2      	; 0x65c <PWM_InitTimer1+0x17e>
 65a:	5c c0       	rjmp	.+184    	; 0x714 <PWM_InitTimer1+0x236>
 65c:	b5 c0       	rjmp	.+362    	; 0x7c8 <PWM_InitTimer1+0x2ea>
 65e:	ae 2d       	mov	r26, r14
 660:	c6 01       	movw	r24, r12
 662:	03 96       	adiw	r24, 0x03	; 3
 664:	a1 1d       	adc	r26, r1
 666:	fc 01       	movw	r30, r24
 668:	84 91       	lpm	r24, Z
 66a:	a7 fd       	sbrc	r26, 7
 66c:	80 81       	ld	r24, Z
 66e:	88 23       	and	r24, r24
 670:	19 f0       	breq	.+6      	; 0x678 <PWM_InitTimer1+0x19a>
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	09 f1       	breq	.+66     	; 0x6b8 <PWM_InitTimer1+0x1da>
 676:	a8 c0       	rjmp	.+336    	; 0x7c8 <PWM_InitTimer1+0x2ea>
 678:	88 e0       	ldi	r24, 0x08	; 8
 67a:	c8 0e       	add	r12, r24
 67c:	d1 1c       	adc	r13, r1
 67e:	e1 1c       	adc	r14, r1
 680:	f6 01       	movw	r30, r12
 682:	24 91       	lpm	r18, Z
 684:	e7 fc       	sbrc	r14, 7
 686:	20 81       	ld	r18, Z
 688:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 68c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 690:	28 9f       	mul	r18, r24
 692:	b0 01       	movw	r22, r0
 694:	29 9f       	mul	r18, r25
 696:	70 0d       	add	r23, r0
 698:	11 24       	eor	r1, r1
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	48 ec       	ldi	r20, 0xC8	; 200
 6a8:	52 e4       	ldi	r21, 0x42	; 66
 6aa:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 6ae:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 6b2:	7b bd       	out	0x2b, r23	; 43
 6b4:	6a bd       	out	0x2a, r22	; 42
 6b6:	88 c0       	rjmp	.+272    	; 0x7c8 <PWM_InitTimer1+0x2ea>
 6b8:	88 e0       	ldi	r24, 0x08	; 8
 6ba:	c8 0e       	add	r12, r24
 6bc:	d1 1c       	adc	r13, r1
 6be:	e1 1c       	adc	r14, r1
 6c0:	f6 01       	movw	r30, r12
 6c2:	64 91       	lpm	r22, Z
 6c4:	e7 fc       	sbrc	r14, 7
 6c6:	60 81       	ld	r22, Z
 6c8:	70 e0       	ldi	r23, 0x00	; 0
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__floatsisf>
 6d2:	9b 01       	movw	r18, r22
 6d4:	ac 01       	movw	r20, r24
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	88 ec       	ldi	r24, 0xC8	; 200
 6dc:	92 e4       	ldi	r25, 0x42	; 66
 6de:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
 6e2:	4b 01       	movw	r8, r22
 6e4:	5c 01       	movw	r10, r24
 6e6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6ea:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 6f6:	a5 01       	movw	r20, r10
 6f8:	94 01       	movw	r18, r8
 6fa:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	48 ec       	ldi	r20, 0xC8	; 200
 704:	52 e4       	ldi	r21, 0x42	; 66
 706:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 70a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 70e:	7b bd       	out	0x2b, r23	; 43
 710:	6a bd       	out	0x2a, r22	; 42
 712:	5a c0       	rjmp	.+180    	; 0x7c8 <PWM_InitTimer1+0x2ea>
 714:	ae 2d       	mov	r26, r14
 716:	c6 01       	movw	r24, r12
 718:	03 96       	adiw	r24, 0x03	; 3
 71a:	a1 1d       	adc	r26, r1
 71c:	fc 01       	movw	r30, r24
 71e:	84 91       	lpm	r24, Z
 720:	a7 fd       	sbrc	r26, 7
 722:	80 81       	ld	r24, Z
 724:	88 23       	and	r24, r24
 726:	19 f0       	breq	.+6      	; 0x72e <PWM_InitTimer1+0x250>
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	09 f1       	breq	.+66     	; 0x76e <PWM_InitTimer1+0x290>
 72c:	4d c0       	rjmp	.+154    	; 0x7c8 <PWM_InitTimer1+0x2ea>
 72e:	88 e0       	ldi	r24, 0x08	; 8
 730:	c8 0e       	add	r12, r24
 732:	d1 1c       	adc	r13, r1
 734:	e1 1c       	adc	r14, r1
 736:	f6 01       	movw	r30, r12
 738:	24 91       	lpm	r18, Z
 73a:	e7 fc       	sbrc	r14, 7
 73c:	20 81       	ld	r18, Z
 73e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 742:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 746:	28 9f       	mul	r18, r24
 748:	b0 01       	movw	r22, r0
 74a:	29 9f       	mul	r18, r25
 74c:	70 0d       	add	r23, r0
 74e:	11 24       	eor	r1, r1
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	48 ec       	ldi	r20, 0xC8	; 200
 75e:	52 e4       	ldi	r21, 0x42	; 66
 760:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 764:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 768:	79 bd       	out	0x29, r23	; 41
 76a:	68 bd       	out	0x28, r22	; 40
 76c:	2d c0       	rjmp	.+90     	; 0x7c8 <PWM_InitTimer1+0x2ea>
 76e:	88 e0       	ldi	r24, 0x08	; 8
 770:	c8 0e       	add	r12, r24
 772:	d1 1c       	adc	r13, r1
 774:	e1 1c       	adc	r14, r1
 776:	f6 01       	movw	r30, r12
 778:	64 91       	lpm	r22, Z
 77a:	e7 fc       	sbrc	r14, 7
 77c:	60 81       	ld	r22, Z
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__floatsisf>
 788:	9b 01       	movw	r18, r22
 78a:	ac 01       	movw	r20, r24
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	88 ec       	ldi	r24, 0xC8	; 200
 792:	92 e4       	ldi	r25, 0x42	; 66
 794:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
 798:	4b 01       	movw	r8, r22
 79a:	5c 01       	movw	r10, r24
 79c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7a0:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 7ac:	a5 01       	movw	r20, r10
 7ae:	94 01       	movw	r18, r8
 7b0:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 7b4:	20 e0       	ldi	r18, 0x00	; 0
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	48 ec       	ldi	r20, 0xC8	; 200
 7ba:	52 e4       	ldi	r21, 0x42	; 66
 7bc:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 7c0:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 7c4:	79 bd       	out	0x29, r23	; 41
 7c6:	68 bd       	out	0x28, r22	; 40
 7c8:	1d bc       	out	0x2d, r1	; 45
 7ca:	1c bc       	out	0x2c, r1	; 44
 7cc:	ef 90       	pop	r14
 7ce:	df 90       	pop	r13
 7d0:	cf 90       	pop	r12
 7d2:	bf 90       	pop	r11
 7d4:	af 90       	pop	r10
 7d6:	9f 90       	pop	r9
 7d8:	8f 90       	pop	r8
 7da:	7f 90       	pop	r7
 7dc:	6f 90       	pop	r6
 7de:	5f 90       	pop	r5
 7e0:	4f 90       	pop	r4
 7e2:	08 95       	ret

Disassembly of section .text.PWM_InitTimer2:

00000d2e <PWM_InitTimer2>:
	}
	/* Clear TCNT1 Register Configuration */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
}

void PWM_InitTimer2(const PWM_ConfigurationType* Config_Ptr) {
 d2e:	cf 92       	push	r12
 d30:	df 92       	push	r13
 d32:	ef 92       	push	r14
 d34:	a8 2f       	mov	r26, r24
 d36:	cb 01       	movw	r24, r22
	/* Make PD7=OC2 as output */
	// DIO_SetPinDirection(DIO_PORT_D, DIO_PIN_7, DIO_OUTPUT);
	SET_BIT(*PORTD_DIR_REG, 7U);
 d38:	21 b3       	in	r18, 0x11	; 17
 d3a:	20 68       	ori	r18, 0x80	; 128
 d3c:	21 bb       	out	0x11, r18	; 17
	/* Clear TCCR2 Register Configurations */
	*TIMER2_CTRL_REG = 0x00U;
 d3e:	15 bc       	out	0x25, r1	; 37
	/* Set PWM Mode */
	*TIMER2_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_2_FAST_BIT);
 d40:	25 b5       	in	r18, 0x25	; 37
 d42:	6c 01       	movw	r12, r24
 d44:	ea 2e       	mov	r14, r26
 d46:	3f ef       	ldi	r19, 0xFF	; 255
 d48:	c3 1a       	sub	r12, r19
 d4a:	d3 0a       	sbc	r13, r19
 d4c:	e3 0a       	sbc	r14, r19
 d4e:	f6 01       	movw	r30, r12
 d50:	34 91       	lpm	r19, Z
 d52:	e7 fc       	sbrc	r14, 7
 d54:	30 81       	ld	r19, Z
 d56:	33 0f       	add	r19, r19
 d58:	33 0f       	add	r19, r19
 d5a:	33 0f       	add	r19, r19
 d5c:	23 2b       	or	r18, r19
 d5e:	20 64       	ori	r18, 0x40	; 64
 d60:	25 bd       	out	0x25, r18	; 37
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_2_INVERTING_BIT);
 d62:	23 b7       	in	r18, 0x33	; 51
 d64:	6c 01       	movw	r12, r24
 d66:	ea 2e       	mov	r14, r26
 d68:	33 e0       	ldi	r19, 0x03	; 3
 d6a:	c3 0e       	add	r12, r19
 d6c:	d1 1c       	adc	r13, r1
 d6e:	e1 1c       	adc	r14, r1
 d70:	f6 01       	movw	r30, r12
 d72:	34 91       	lpm	r19, Z
 d74:	e7 fc       	sbrc	r14, 7
 d76:	30 81       	ld	r19, Z
 d78:	32 95       	swap	r19
 d7a:	30 7f       	andi	r19, 0xF0	; 240
 d7c:	23 2b       	or	r18, r19
 d7e:	20 62       	ori	r18, 0x20	; 32
 d80:	23 bf       	out	0x33, r18	; 51
	/* Select Clock Source and Prescaler */
	if ((Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_FALLING_EDGE && (Config_Ptr->Clk_Prescale) != PWM_EXT_CLK_RISING_EDGE) {
 d82:	9c 01       	movw	r18, r24
 d84:	4a 2f       	mov	r20, r26
 d86:	2e 5f       	subi	r18, 0xFE	; 254
 d88:	3f 4f       	sbci	r19, 0xFF	; 255
 d8a:	4f 4f       	sbci	r20, 0xFF	; 255
 d8c:	f9 01       	movw	r30, r18
 d8e:	34 91       	lpm	r19, Z
 d90:	47 fd       	sbrc	r20, 7
 d92:	30 81       	ld	r19, Z
 d94:	28 ef       	ldi	r18, 0xF8	; 248
 d96:	23 0f       	add	r18, r19
 d98:	22 30       	cpi	r18, 0x02	; 2
 d9a:	18 f0       	brcs	.+6      	; 0xda2 <PWM_InitTimer2+0x74>
		*TIMER2_CTRL_REG |= (Config_Ptr->Clk_Prescale);
 d9c:	25 b5       	in	r18, 0x25	; 37
 d9e:	23 2b       	or	r18, r19
 da0:	25 bd       	out	0x25, r18	; 37
	}
	/* Set Duty Value in OCR2 Register */
	*TIMER2_CMP_REG = 0x00U;
 da2:	13 bc       	out	0x23, r1	; 35
	switch (Config_Ptr->State) {
 da4:	9c 01       	movw	r18, r24
 da6:	4a 2f       	mov	r20, r26
 da8:	2d 5f       	subi	r18, 0xFD	; 253
 daa:	3f 4f       	sbci	r19, 0xFF	; 255
 dac:	4f 4f       	sbci	r20, 0xFF	; 255
 dae:	f9 01       	movw	r30, r18
 db0:	24 91       	lpm	r18, Z
 db2:	47 fd       	sbrc	r20, 7
 db4:	20 81       	ld	r18, Z
 db6:	22 23       	and	r18, r18
 db8:	19 f0       	breq	.+6      	; 0xdc0 <PWM_InitTimer2+0x92>
 dba:	21 30       	cpi	r18, 0x01	; 1
 dbc:	c9 f0       	breq	.+50     	; 0xdf0 <PWM_InitTimer2+0xc2>
 dbe:	3a c0       	rjmp	.+116    	; 0xe34 <PWM_InitTimer2+0x106>
		case PWM_NON_INVERTED: *TIMER2_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
 dc0:	08 96       	adiw	r24, 0x08	; 8
 dc2:	a1 1d       	adc	r26, r1
 dc4:	fc 01       	movw	r30, r24
 dc6:	64 91       	lpm	r22, Z
 dc8:	a7 fd       	sbrc	r26, 7
 dca:	60 81       	ld	r22, Z
 dcc:	8f ef       	ldi	r24, 0xFF	; 255
 dce:	68 9f       	mul	r22, r24
 dd0:	b0 01       	movw	r22, r0
 dd2:	11 24       	eor	r1, r1
 dd4:	80 e0       	ldi	r24, 0x00	; 0
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__floatunsisf>
 ddc:	20 e0       	ldi	r18, 0x00	; 0
 dde:	30 e0       	ldi	r19, 0x00	; 0
 de0:	48 ec       	ldi	r20, 0xC8	; 200
 de2:	52 e4       	ldi	r21, 0x42	; 66
 de4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 de8:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 dec:	63 bd       	out	0x23, r22	; 35
 dee:	22 c0       	rjmp	.+68     	; 0xe34 <PWM_InitTimer2+0x106>
		case PWM_INVERTED: *TIMER2_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_2_RESOLUTION / 100.0); break;
 df0:	08 96       	adiw	r24, 0x08	; 8
 df2:	a1 1d       	adc	r26, r1
 df4:	fc 01       	movw	r30, r24
 df6:	64 91       	lpm	r22, Z
 df8:	a7 fd       	sbrc	r26, 7
 dfa:	60 81       	ld	r22, Z
 dfc:	70 e0       	ldi	r23, 0x00	; 0
 dfe:	80 e0       	ldi	r24, 0x00	; 0
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__floatsisf>
 e06:	9b 01       	movw	r18, r22
 e08:	ac 01       	movw	r20, r24
 e0a:	60 e0       	ldi	r22, 0x00	; 0
 e0c:	70 e0       	ldi	r23, 0x00	; 0
 e0e:	88 ec       	ldi	r24, 0xC8	; 200
 e10:	92 e4       	ldi	r25, 0x42	; 66
 e12:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__subsf3>
 e16:	20 e0       	ldi	r18, 0x00	; 0
 e18:	30 e0       	ldi	r19, 0x00	; 0
 e1a:	4f e7       	ldi	r20, 0x7F	; 127
 e1c:	53 e4       	ldi	r21, 0x43	; 67
 e1e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__mulsf3>
 e22:	20 e0       	ldi	r18, 0x00	; 0
 e24:	30 e0       	ldi	r19, 0x00	; 0
 e26:	48 ec       	ldi	r20, 0xC8	; 200
 e28:	52 e4       	ldi	r21, 0x42	; 66
 e2a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3>
 e2e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fixunssfsi>
 e32:	63 bd       	out	0x23, r22	; 35
		default: break;
	}
	/* Clear TCNT2 Register Configurations */
	*TIMER2_CNTR_REG = 0x00U;
 e34:	14 bc       	out	0x24, r1	; 36
 e36:	ef 90       	pop	r14
 e38:	df 90       	pop	r13
 e3a:	cf 90       	pop	r12
 e3c:	08 95       	ret

Disassembly of section .text.PWM_Init:

0000192a <PWM_Init>:

/************************************************************************/
/*				Functions Implementations                               */
/************************************************************************/
void PWM_Init(const PWM_ConfigurationType* Config_Ptr) {
	switch (Config_Ptr->Tmr_Channel) {
    192a:	e6 2f       	mov	r30, r22
    192c:	f7 2f       	mov	r31, r23
    192e:	94 91       	lpm	r25, Z
    1930:	87 fd       	sbrc	r24, 7
    1932:	90 81       	ld	r25, Z
    1934:	93 30       	cpi	r25, 0x03	; 3
    1936:	18 f4       	brcc	.+6      	; 0x193e <PWM_Init+0x14>
    1938:	91 30       	cpi	r25, 0x01	; 1
    193a:	20 f0       	brcs	.+8      	; 0x1944 <PWM_Init+0x1a>
    193c:	06 c0       	rjmp	.+12     	; 0x194a <PWM_Init+0x20>
    193e:	93 30       	cpi	r25, 0x03	; 3
    1940:	39 f0       	breq	.+14     	; 0x1950 <PWM_Init+0x26>
    1942:	08 95       	ret
		case PWM_TIMER_0_CHANNEL: PWM_InitTimer0(Config_Ptr); break;
    1944:	0e 94 fe 05 	call	0xbfc	; 0xbfc <PWM_InitTimer0>
    1948:	08 95       	ret
		case PWM_TIMER_1_CHANNEL_A:
		case PWM_TIMER_1_CHANNEL_B: PWM_InitTimer1(Config_Ptr); break;
    194a:	0e 94 6f 02 	call	0x4de	; 0x4de <PWM_InitTimer1>
    194e:	08 95       	ret
		case PWM_TIMER_2_CHANNEL: PWM_InitTimer2(Config_Ptr); break;
    1950:	0e 94 97 06 	call	0xd2e	; 0xd2e <PWM_InitTimer2>
    1954:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b22 <__subsf3>:
    1b22:	50 58       	subi	r21, 0x80	; 128

00001b24 <__addsf3>:
    1b24:	bb 27       	eor	r27, r27
    1b26:	aa 27       	eor	r26, r26
    1b28:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__addsf3x>
    1b2c:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

000010d2 <__addsf3x>:
    10d2:	11 c0       	rjmp	.+34     	; 0x10f6 <__addsf3x+0x24>
    10d4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    10d8:	38 f0       	brcs	.+14     	; 0x10e8 <__addsf3x+0x16>
    10da:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    10de:	20 f0       	brcs	.+8      	; 0x10e8 <__addsf3x+0x16>
    10e0:	39 f4       	brne	.+14     	; 0x10f0 <__addsf3x+0x1e>
    10e2:	9f 3f       	cpi	r25, 0xFF	; 255
    10e4:	19 f4       	brne	.+6      	; 0x10ec <__addsf3x+0x1a>
    10e6:	26 f4       	brtc	.+8      	; 0x10f0 <__addsf3x+0x1e>
    10e8:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>
    10ec:	0e f4       	brtc	.+2      	; 0x10f0 <__addsf3x+0x1e>
    10ee:	e0 95       	com	r30
    10f0:	e7 fb       	bst	r30, 7
    10f2:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__fp_inf>
    10f6:	e9 2f       	mov	r30, r25
    10f8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_split3>
    10fc:	58 f3       	brcs	.-42     	; 0x10d4 <__addsf3x+0x2>
    10fe:	ba 17       	cp	r27, r26
    1100:	62 07       	cpc	r22, r18
    1102:	73 07       	cpc	r23, r19
    1104:	84 07       	cpc	r24, r20
    1106:	95 07       	cpc	r25, r21
    1108:	20 f0       	brcs	.+8      	; 0x1112 <__addsf3x+0x40>
    110a:	79 f4       	brne	.+30     	; 0x112a <__addsf3x+0x58>
    110c:	a6 f5       	brtc	.+104    	; 0x1176 <__addsf3x+0xa4>
    110e:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__fp_zero>
    1112:	0e f4       	brtc	.+2      	; 0x1116 <__addsf3x+0x44>
    1114:	e0 95       	com	r30
    1116:	0b 2e       	mov	r0, r27
    1118:	ba 2f       	mov	r27, r26
    111a:	a0 2d       	mov	r26, r0
    111c:	0b 01       	movw	r0, r22
    111e:	b9 01       	movw	r22, r18
    1120:	90 01       	movw	r18, r0
    1122:	0c 01       	movw	r0, r24
    1124:	ca 01       	movw	r24, r20
    1126:	a0 01       	movw	r20, r0
    1128:	11 24       	eor	r1, r1
    112a:	ff 27       	eor	r31, r31
    112c:	59 1b       	sub	r21, r25
    112e:	99 f0       	breq	.+38     	; 0x1156 <__addsf3x+0x84>
    1130:	59 3f       	cpi	r21, 0xF9	; 249
    1132:	50 f4       	brcc	.+20     	; 0x1148 <__addsf3x+0x76>
    1134:	50 3e       	cpi	r21, 0xE0	; 224
    1136:	68 f1       	brcs	.+90     	; 0x1192 <__addsf3x+0xc0>
    1138:	1a 16       	cp	r1, r26
    113a:	f0 40       	sbci	r31, 0x00	; 0
    113c:	a2 2f       	mov	r26, r18
    113e:	23 2f       	mov	r18, r19
    1140:	34 2f       	mov	r19, r20
    1142:	44 27       	eor	r20, r20
    1144:	58 5f       	subi	r21, 0xF8	; 248
    1146:	f3 cf       	rjmp	.-26     	; 0x112e <__addsf3x+0x5c>
    1148:	46 95       	lsr	r20
    114a:	37 95       	ror	r19
    114c:	27 95       	ror	r18
    114e:	a7 95       	ror	r26
    1150:	f0 40       	sbci	r31, 0x00	; 0
    1152:	53 95       	inc	r21
    1154:	c9 f7       	brne	.-14     	; 0x1148 <__addsf3x+0x76>
    1156:	7e f4       	brtc	.+30     	; 0x1176 <__addsf3x+0xa4>
    1158:	1f 16       	cp	r1, r31
    115a:	ba 0b       	sbc	r27, r26
    115c:	62 0b       	sbc	r22, r18
    115e:	73 0b       	sbc	r23, r19
    1160:	84 0b       	sbc	r24, r20
    1162:	ba f0       	brmi	.+46     	; 0x1192 <__addsf3x+0xc0>
    1164:	91 50       	subi	r25, 0x01	; 1
    1166:	a1 f0       	breq	.+40     	; 0x1190 <__addsf3x+0xbe>
    1168:	ff 0f       	add	r31, r31
    116a:	bb 1f       	adc	r27, r27
    116c:	66 1f       	adc	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	c2 f7       	brpl	.-16     	; 0x1164 <__addsf3x+0x92>
    1174:	0e c0       	rjmp	.+28     	; 0x1192 <__addsf3x+0xc0>
    1176:	ba 0f       	add	r27, r26
    1178:	62 1f       	adc	r22, r18
    117a:	73 1f       	adc	r23, r19
    117c:	84 1f       	adc	r24, r20
    117e:	48 f4       	brcc	.+18     	; 0x1192 <__addsf3x+0xc0>
    1180:	87 95       	ror	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	f7 95       	ror	r31
    118a:	9e 3f       	cpi	r25, 0xFE	; 254
    118c:	08 f0       	brcs	.+2      	; 0x1190 <__addsf3x+0xbe>
    118e:	b0 cf       	rjmp	.-160    	; 0x10f0 <__addsf3x+0x1e>
    1190:	93 95       	inc	r25
    1192:	88 0f       	add	r24, r24
    1194:	08 f0       	brcs	.+2      	; 0x1198 <__addsf3x+0xc6>
    1196:	99 27       	eor	r25, r25
    1198:	ee 0f       	add	r30, r30
    119a:	97 95       	ror	r25
    119c:	87 95       	ror	r24
    119e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b7c <__divsf3>:
    1b7c:	0e 94 90 07 	call	0xf20	; 0xf20 <__divsf3x>
    1b80:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000f20 <__divsf3x>:
 f20:	10 c0       	rjmp	.+32     	; 0xf42 <__divsf3x+0x22>
 f22:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
 f26:	58 f0       	brcs	.+22     	; 0xf3e <__divsf3x+0x1e>
 f28:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
 f2c:	40 f0       	brcs	.+16     	; 0xf3e <__divsf3x+0x1e>
 f2e:	29 f4       	brne	.+10     	; 0xf3a <__divsf3x+0x1a>
 f30:	5f 3f       	cpi	r21, 0xFF	; 255
 f32:	29 f0       	breq	.+10     	; 0xf3e <__divsf3x+0x1e>
 f34:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__fp_inf>
 f38:	51 11       	cpse	r21, r1
 f3a:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_szero>
 f3e:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>
 f42:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_split3>
 f46:	68 f3       	brcs	.-38     	; 0xf22 <__divsf3x+0x2>

00000f48 <__divsf3_pse>:
 f48:	99 23       	and	r25, r25
 f4a:	b1 f3       	breq	.-20     	; 0xf38 <__divsf3x+0x18>
 f4c:	55 23       	and	r21, r21
 f4e:	91 f3       	breq	.-28     	; 0xf34 <__divsf3x+0x14>
 f50:	95 1b       	sub	r25, r21
 f52:	55 0b       	sbc	r21, r21
 f54:	bb 27       	eor	r27, r27
 f56:	aa 27       	eor	r26, r26
 f58:	62 17       	cp	r22, r18
 f5a:	73 07       	cpc	r23, r19
 f5c:	84 07       	cpc	r24, r20
 f5e:	38 f0       	brcs	.+14     	; 0xf6e <__divsf3_pse+0x26>
 f60:	9f 5f       	subi	r25, 0xFF	; 255
 f62:	5f 4f       	sbci	r21, 0xFF	; 255
 f64:	22 0f       	add	r18, r18
 f66:	33 1f       	adc	r19, r19
 f68:	44 1f       	adc	r20, r20
 f6a:	aa 1f       	adc	r26, r26
 f6c:	a9 f3       	breq	.-22     	; 0xf58 <__divsf3_pse+0x10>
 f6e:	35 d0       	rcall	.+106    	; 0xfda <__divsf3_pse+0x92>
 f70:	0e 2e       	mov	r0, r30
 f72:	3a f0       	brmi	.+14     	; 0xf82 <__divsf3_pse+0x3a>
 f74:	e0 e8       	ldi	r30, 0x80	; 128
 f76:	32 d0       	rcall	.+100    	; 0xfdc <__divsf3_pse+0x94>
 f78:	91 50       	subi	r25, 0x01	; 1
 f7a:	50 40       	sbci	r21, 0x00	; 0
 f7c:	e6 95       	lsr	r30
 f7e:	00 1c       	adc	r0, r0
 f80:	ca f7       	brpl	.-14     	; 0xf74 <__divsf3_pse+0x2c>
 f82:	2b d0       	rcall	.+86     	; 0xfda <__divsf3_pse+0x92>
 f84:	fe 2f       	mov	r31, r30
 f86:	29 d0       	rcall	.+82     	; 0xfda <__divsf3_pse+0x92>
 f88:	66 0f       	add	r22, r22
 f8a:	77 1f       	adc	r23, r23
 f8c:	88 1f       	adc	r24, r24
 f8e:	bb 1f       	adc	r27, r27
 f90:	26 17       	cp	r18, r22
 f92:	37 07       	cpc	r19, r23
 f94:	48 07       	cpc	r20, r24
 f96:	ab 07       	cpc	r26, r27
 f98:	b0 e8       	ldi	r27, 0x80	; 128
 f9a:	09 f0       	breq	.+2      	; 0xf9e <__divsf3_pse+0x56>
 f9c:	bb 0b       	sbc	r27, r27
 f9e:	80 2d       	mov	r24, r0
 fa0:	bf 01       	movw	r22, r30
 fa2:	ff 27       	eor	r31, r31
 fa4:	93 58       	subi	r25, 0x83	; 131
 fa6:	5f 4f       	sbci	r21, 0xFF	; 255
 fa8:	3a f0       	brmi	.+14     	; 0xfb8 <__divsf3_pse+0x70>
 faa:	9e 3f       	cpi	r25, 0xFE	; 254
 fac:	51 05       	cpc	r21, r1
 fae:	78 f0       	brcs	.+30     	; 0xfce <__divsf3_pse+0x86>
 fb0:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__fp_inf>
 fb4:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_szero>
 fb8:	5f 3f       	cpi	r21, 0xFF	; 255
 fba:	e4 f3       	brlt	.-8      	; 0xfb4 <__divsf3_pse+0x6c>
 fbc:	98 3e       	cpi	r25, 0xE8	; 232
 fbe:	d4 f3       	brlt	.-12     	; 0xfb4 <__divsf3_pse+0x6c>
 fc0:	86 95       	lsr	r24
 fc2:	77 95       	ror	r23
 fc4:	67 95       	ror	r22
 fc6:	b7 95       	ror	r27
 fc8:	f7 95       	ror	r31
 fca:	9f 5f       	subi	r25, 0xFF	; 255
 fcc:	c9 f7       	brne	.-14     	; 0xfc0 <__divsf3_pse+0x78>
 fce:	88 0f       	add	r24, r24
 fd0:	91 1d       	adc	r25, r1
 fd2:	96 95       	lsr	r25
 fd4:	87 95       	ror	r24
 fd6:	97 f9       	bld	r25, 7
 fd8:	08 95       	ret
 fda:	e1 e0       	ldi	r30, 0x01	; 1
 fdc:	66 0f       	add	r22, r22
 fde:	77 1f       	adc	r23, r23
 fe0:	88 1f       	adc	r24, r24
 fe2:	bb 1f       	adc	r27, r27
 fe4:	62 17       	cp	r22, r18
 fe6:	73 07       	cpc	r23, r19
 fe8:	84 07       	cpc	r24, r20
 fea:	ba 07       	cpc	r27, r26
 fec:	20 f0       	brcs	.+8      	; 0xff6 <__divsf3_pse+0xae>
 fee:	62 1b       	sub	r22, r18
 ff0:	73 0b       	sbc	r23, r19
 ff2:	84 0b       	sbc	r24, r20
 ff4:	ba 0b       	sbc	r27, r26
 ff6:	ee 1f       	adc	r30, r30
 ff8:	88 f7       	brcc	.-30     	; 0xfdc <__divsf3_pse+0x94>
 ffa:	e0 95       	com	r30
 ffc:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001672 <__fixunssfsi>:
    1672:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__fp_splitA>
    1676:	88 f0       	brcs	.+34     	; 0x169a <__fixunssfsi+0x28>
    1678:	9f 57       	subi	r25, 0x7F	; 127
    167a:	98 f0       	brcs	.+38     	; 0x16a2 <__fixunssfsi+0x30>
    167c:	b9 2f       	mov	r27, r25
    167e:	99 27       	eor	r25, r25
    1680:	b7 51       	subi	r27, 0x17	; 23
    1682:	b0 f0       	brcs	.+44     	; 0x16b0 <__fixunssfsi+0x3e>
    1684:	e1 f0       	breq	.+56     	; 0x16be <__fixunssfsi+0x4c>
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	88 1f       	adc	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	1a f0       	brmi	.+6      	; 0x1696 <__fixunssfsi+0x24>
    1690:	ba 95       	dec	r27
    1692:	c9 f7       	brne	.-14     	; 0x1686 <__fixunssfsi+0x14>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <__fixunssfsi+0x4c>
    1696:	b1 30       	cpi	r27, 0x01	; 1
    1698:	91 f0       	breq	.+36     	; 0x16be <__fixunssfsi+0x4c>
    169a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__fp_zero>
    169e:	b1 e0       	ldi	r27, 0x01	; 1
    16a0:	08 95       	ret
    16a2:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__fp_zero>
    16a6:	67 2f       	mov	r22, r23
    16a8:	78 2f       	mov	r23, r24
    16aa:	88 27       	eor	r24, r24
    16ac:	b8 5f       	subi	r27, 0xF8	; 248
    16ae:	39 f0       	breq	.+14     	; 0x16be <__fixunssfsi+0x4c>
    16b0:	b9 3f       	cpi	r27, 0xF9	; 249
    16b2:	cc f3       	brlt	.-14     	; 0x16a6 <__fixunssfsi+0x34>
    16b4:	86 95       	lsr	r24
    16b6:	77 95       	ror	r23
    16b8:	67 95       	ror	r22
    16ba:	b3 95       	inc	r27
    16bc:	d9 f7       	brne	.-10     	; 0x16b4 <__fixunssfsi+0x42>
    16be:	3e f4       	brtc	.+14     	; 0x16ce <__fixunssfsi+0x5c>
    16c0:	90 95       	com	r25
    16c2:	80 95       	com	r24
    16c4:	70 95       	com	r23
    16c6:	61 95       	neg	r22
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000014b6 <__floatunsisf>:
    14b6:	e8 94       	clt
    14b8:	09 c0       	rjmp	.+18     	; 0x14cc <__floatsisf+0x12>

000014ba <__floatsisf>:
    14ba:	97 fb       	bst	r25, 7
    14bc:	3e f4       	brtc	.+14     	; 0x14cc <__floatsisf+0x12>
    14be:	90 95       	com	r25
    14c0:	80 95       	com	r24
    14c2:	70 95       	com	r23
    14c4:	61 95       	neg	r22
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	99 23       	and	r25, r25
    14ce:	a9 f0       	breq	.+42     	; 0x14fa <__floatsisf+0x40>
    14d0:	f9 2f       	mov	r31, r25
    14d2:	96 e9       	ldi	r25, 0x96	; 150
    14d4:	bb 27       	eor	r27, r27
    14d6:	93 95       	inc	r25
    14d8:	f6 95       	lsr	r31
    14da:	87 95       	ror	r24
    14dc:	77 95       	ror	r23
    14de:	67 95       	ror	r22
    14e0:	b7 95       	ror	r27
    14e2:	f1 11       	cpse	r31, r1
    14e4:	f8 cf       	rjmp	.-16     	; 0x14d6 <__floatsisf+0x1c>
    14e6:	fa f4       	brpl	.+62     	; 0x1526 <__floatsisf+0x6c>
    14e8:	bb 0f       	add	r27, r27
    14ea:	11 f4       	brne	.+4      	; 0x14f0 <__floatsisf+0x36>
    14ec:	60 ff       	sbrs	r22, 0
    14ee:	1b c0       	rjmp	.+54     	; 0x1526 <__floatsisf+0x6c>
    14f0:	6f 5f       	subi	r22, 0xFF	; 255
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	8f 4f       	sbci	r24, 0xFF	; 255
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	16 c0       	rjmp	.+44     	; 0x1526 <__floatsisf+0x6c>
    14fa:	88 23       	and	r24, r24
    14fc:	11 f0       	breq	.+4      	; 0x1502 <__floatsisf+0x48>
    14fe:	96 e9       	ldi	r25, 0x96	; 150
    1500:	11 c0       	rjmp	.+34     	; 0x1524 <__floatsisf+0x6a>
    1502:	77 23       	and	r23, r23
    1504:	21 f0       	breq	.+8      	; 0x150e <__floatsisf+0x54>
    1506:	9e e8       	ldi	r25, 0x8E	; 142
    1508:	87 2f       	mov	r24, r23
    150a:	76 2f       	mov	r23, r22
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <__floatsisf+0x5e>
    150e:	66 23       	and	r22, r22
    1510:	71 f0       	breq	.+28     	; 0x152e <__floatsisf+0x74>
    1512:	96 e8       	ldi	r25, 0x86	; 134
    1514:	86 2f       	mov	r24, r22
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	2a f0       	brmi	.+10     	; 0x1526 <__floatsisf+0x6c>
    151c:	9a 95       	dec	r25
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	da f7       	brpl	.-10     	; 0x151c <__floatsisf+0x62>
    1526:	88 0f       	add	r24, r24
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	97 f9       	bld	r25, 7
    152e:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b5a <__fp_inf>:
    1b5a:	97 f9       	bld	r25, 7
    1b5c:	9f 67       	ori	r25, 0x7F	; 127
    1b5e:	80 e8       	ldi	r24, 0x80	; 128
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b8c <__fp_nan>:
    1b8c:	9f ef       	ldi	r25, 0xFF	; 255
    1b8e:	80 ec       	ldi	r24, 0xC0	; 192
    1b90:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b30 <__fp_pscA>:
    1b30:	00 24       	eor	r0, r0
    1b32:	0a 94       	dec	r0
    1b34:	16 16       	cp	r1, r22
    1b36:	17 06       	cpc	r1, r23
    1b38:	18 06       	cpc	r1, r24
    1b3a:	09 06       	cpc	r0, r25
    1b3c:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b3e <__fp_pscB>:
    1b3e:	00 24       	eor	r0, r0
    1b40:	0a 94       	dec	r0
    1b42:	12 16       	cp	r1, r18
    1b44:	13 06       	cpc	r1, r19
    1b46:	14 06       	cpc	r1, r20
    1b48:	05 06       	cpc	r0, r21
    1b4a:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000019a2 <__fp_round>:
    19a2:	09 2e       	mov	r0, r25
    19a4:	03 94       	inc	r0
    19a6:	00 0c       	add	r0, r0
    19a8:	11 f4       	brne	.+4      	; 0x19ae <__fp_round+0xc>
    19aa:	88 23       	and	r24, r24
    19ac:	52 f0       	brmi	.+20     	; 0x19c2 <__fp_round+0x20>
    19ae:	bb 0f       	add	r27, r27
    19b0:	40 f4       	brcc	.+16     	; 0x19c2 <__fp_round+0x20>
    19b2:	bf 2b       	or	r27, r31
    19b4:	11 f4       	brne	.+4      	; 0x19ba <__fp_round+0x18>
    19b6:	60 ff       	sbrs	r22, 0
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <__fp_round+0x20>
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	8f 4f       	sbci	r24, 0xFF	; 255
    19c0:	9f 4f       	sbci	r25, 0xFF	; 255
    19c2:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

000017b8 <__fp_split3>:
    17b8:	57 fd       	sbrc	r21, 7
    17ba:	90 58       	subi	r25, 0x80	; 128
    17bc:	44 0f       	add	r20, r20
    17be:	55 1f       	adc	r21, r21
    17c0:	59 f0       	breq	.+22     	; 0x17d8 <__fp_splitA+0x10>
    17c2:	5f 3f       	cpi	r21, 0xFF	; 255
    17c4:	71 f0       	breq	.+28     	; 0x17e2 <__fp_splitA+0x1a>
    17c6:	47 95       	ror	r20

000017c8 <__fp_splitA>:
    17c8:	88 0f       	add	r24, r24
    17ca:	97 fb       	bst	r25, 7
    17cc:	99 1f       	adc	r25, r25
    17ce:	61 f0       	breq	.+24     	; 0x17e8 <__fp_splitA+0x20>
    17d0:	9f 3f       	cpi	r25, 0xFF	; 255
    17d2:	79 f0       	breq	.+30     	; 0x17f2 <__fp_splitA+0x2a>
    17d4:	87 95       	ror	r24
    17d6:	08 95       	ret
    17d8:	12 16       	cp	r1, r18
    17da:	13 06       	cpc	r1, r19
    17dc:	14 06       	cpc	r1, r20
    17de:	55 1f       	adc	r21, r21
    17e0:	f2 cf       	rjmp	.-28     	; 0x17c6 <__fp_split3+0xe>
    17e2:	46 95       	lsr	r20
    17e4:	f1 df       	rcall	.-30     	; 0x17c8 <__fp_splitA>
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <__fp_splitA+0x30>
    17e8:	16 16       	cp	r1, r22
    17ea:	17 06       	cpc	r1, r23
    17ec:	18 06       	cpc	r1, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	f1 cf       	rjmp	.-30     	; 0x17d4 <__fp_splitA+0xc>
    17f2:	86 95       	lsr	r24
    17f4:	71 05       	cpc	r23, r1
    17f6:	61 05       	cpc	r22, r1
    17f8:	08 94       	sec
    17fa:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b4c <__fp_zero>:
    1b4c:	e8 94       	clt

00001b4e <__fp_szero>:
    1b4e:	bb 27       	eor	r27, r27
    1b50:	66 27       	eor	r22, r22
    1b52:	77 27       	eor	r23, r23
    1b54:	cb 01       	movw	r24, r22
    1b56:	97 f9       	bld	r25, 7
    1b58:	08 95       	ret

Disassembly of section .text.avrlibc.fplib:

00001b84 <__mulsf3>:
    1b84:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3x>
    1b88:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__fp_round>

Disassembly of section .text.avrlibc.fplib:

00000ffe <__mulsf3x>:
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <__mulsf3x+0x20>
    1000:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_pscA>
    1004:	38 f0       	brcs	.+14     	; 0x1014 <__mulsf3x+0x16>
    1006:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_pscB>
    100a:	20 f0       	brcs	.+8      	; 0x1014 <__mulsf3x+0x16>
    100c:	95 23       	and	r25, r21
    100e:	11 f0       	breq	.+4      	; 0x1014 <__mulsf3x+0x16>
    1010:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__fp_inf>
    1014:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__fp_nan>
    1018:	11 24       	eor	r1, r1
    101a:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_szero>
    101e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_split3>
    1022:	70 f3       	brcs	.-36     	; 0x1000 <__mulsf3x+0x2>

00001024 <__mulsf3_pse>:
    1024:	95 9f       	mul	r25, r21
    1026:	c1 f3       	breq	.-16     	; 0x1018 <__mulsf3x+0x1a>
    1028:	95 0f       	add	r25, r21
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	55 1f       	adc	r21, r21
    102e:	62 9f       	mul	r22, r18
    1030:	f0 01       	movw	r30, r0
    1032:	72 9f       	mul	r23, r18
    1034:	bb 27       	eor	r27, r27
    1036:	f0 0d       	add	r31, r0
    1038:	b1 1d       	adc	r27, r1
    103a:	63 9f       	mul	r22, r19
    103c:	aa 27       	eor	r26, r26
    103e:	f0 0d       	add	r31, r0
    1040:	b1 1d       	adc	r27, r1
    1042:	aa 1f       	adc	r26, r26
    1044:	64 9f       	mul	r22, r20
    1046:	66 27       	eor	r22, r22
    1048:	b0 0d       	add	r27, r0
    104a:	a1 1d       	adc	r26, r1
    104c:	66 1f       	adc	r22, r22
    104e:	82 9f       	mul	r24, r18
    1050:	22 27       	eor	r18, r18
    1052:	b0 0d       	add	r27, r0
    1054:	a1 1d       	adc	r26, r1
    1056:	62 1f       	adc	r22, r18
    1058:	73 9f       	mul	r23, r19
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	62 1f       	adc	r22, r18
    1060:	83 9f       	mul	r24, r19
    1062:	a0 0d       	add	r26, r0
    1064:	61 1d       	adc	r22, r1
    1066:	22 1f       	adc	r18, r18
    1068:	74 9f       	mul	r23, r20
    106a:	33 27       	eor	r19, r19
    106c:	a0 0d       	add	r26, r0
    106e:	61 1d       	adc	r22, r1
    1070:	23 1f       	adc	r18, r19
    1072:	84 9f       	mul	r24, r20
    1074:	60 0d       	add	r22, r0
    1076:	21 1d       	adc	r18, r1
    1078:	82 2f       	mov	r24, r18
    107a:	76 2f       	mov	r23, r22
    107c:	6a 2f       	mov	r22, r26
    107e:	11 24       	eor	r1, r1
    1080:	9f 57       	subi	r25, 0x7F	; 127
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	9a f0       	brmi	.+38     	; 0x10ac <__mulsf3_pse+0x88>
    1086:	f1 f0       	breq	.+60     	; 0x10c4 <__mulsf3_pse+0xa0>
    1088:	88 23       	and	r24, r24
    108a:	4a f0       	brmi	.+18     	; 0x109e <__mulsf3_pse+0x7a>
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	bb 1f       	adc	r27, r27
    1092:	66 1f       	adc	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	50 40       	sbci	r21, 0x00	; 0
    109c:	a9 f7       	brne	.-22     	; 0x1088 <__mulsf3_pse+0x64>
    109e:	9e 3f       	cpi	r25, 0xFE	; 254
    10a0:	51 05       	cpc	r21, r1
    10a2:	80 f0       	brcs	.+32     	; 0x10c4 <__mulsf3_pse+0xa0>
    10a4:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__fp_inf>
    10a8:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__fp_szero>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	e4 f3       	brlt	.-8      	; 0x10a8 <__mulsf3_pse+0x84>
    10b0:	98 3e       	cpi	r25, 0xE8	; 232
    10b2:	d4 f3       	brlt	.-12     	; 0x10a8 <__mulsf3_pse+0x84>
    10b4:	86 95       	lsr	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	e7 95       	ror	r30
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	c1 f7       	brne	.-16     	; 0x10b4 <__mulsf3_pse+0x90>
    10c4:	fe 2b       	or	r31, r30
    10c6:	88 0f       	add	r24, r24
    10c8:	91 1d       	adc	r25, r1
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000019c4 <__mulsi3>:
    19c4:	db 01       	movw	r26, r22
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__muluhisi3>
    19ce:	bf 91       	pop	r27
    19d0:	af 91       	pop	r26
    19d2:	a2 9f       	mul	r26, r18
    19d4:	80 0d       	add	r24, r0
    19d6:	91 1d       	adc	r25, r1
    19d8:	a3 9f       	mul	r26, r19
    19da:	90 0d       	add	r25, r0
    19dc:	b2 9f       	mul	r27, r18
    19de:	90 0d       	add	r25, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	08 95       	ret

Disassembly of section .text.libgcc.div:

000018fc <__divmodsi4>:
    18fc:	05 2e       	mov	r0, r21
    18fe:	97 fb       	bst	r25, 7
    1900:	1e f4       	brtc	.+6      	; 0x1908 <__divmodsi4+0xc>
    1902:	00 94       	com	r0
    1904:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__negsi2>
    1908:	57 fd       	sbrc	r21, 7
    190a:	07 d0       	rcall	.+14     	; 0x191a <__divmodsi4_neg2>
    190c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__udivmodsi4>
    1910:	07 fc       	sbrc	r0, 7
    1912:	03 d0       	rcall	.+6      	; 0x191a <__divmodsi4_neg2>
    1914:	4e f4       	brtc	.+18     	; 0x1928 <__divmodsi4_exit>
    1916:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__negsi2>

0000191a <__divmodsi4_neg2>:
    191a:	50 95       	com	r21
    191c:	40 95       	com	r20
    191e:	30 95       	com	r19
    1920:	21 95       	neg	r18
    1922:	3f 4f       	sbci	r19, 0xFF	; 255
    1924:	4f 4f       	sbci	r20, 0xFF	; 255
    1926:	5f 4f       	sbci	r21, 0xFF	; 255

00001928 <__divmodsi4_exit>:
    1928:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001af4 <__negsi2>:
    1af4:	90 95       	com	r25
    1af6:	80 95       	com	r24
    1af8:	70 95       	com	r23
    1afa:	61 95       	neg	r22
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	08 95       	ret

Disassembly of section .text.libgcc:

00001b66 <__tablejump2__>:
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	05 90       	lpm	r0, Z+
    1b6c:	f4 91       	lpm	r31, Z
    1b6e:	e0 2d       	mov	r30, r0
    1b70:	09 94       	ijmp

Disassembly of section .text.libgcc.mul:

00001aa8 <__muluhisi3>:
    1aa8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__umulhisi3>
    1aac:	a5 9f       	mul	r26, r21
    1aae:	90 0d       	add	r25, r0
    1ab0:	b4 9f       	mul	r27, r20
    1ab2:	90 0d       	add	r25, r0
    1ab4:	a4 9f       	mul	r26, r20
    1ab6:	80 0d       	add	r24, r0
    1ab8:	91 1d       	adc	r25, r1
    1aba:	11 24       	eor	r1, r1
    1abc:	08 95       	ret

Disassembly of section .text.libgcc:

00001b04 <__xload_2>:
    1b04:	57 fd       	sbrc	r21, 7
    1b06:	03 c0       	rjmp	.+6      	; 0x1b0e <__xload_2+0xa>
    1b08:	65 91       	lpm	r22, Z+
    1b0a:	75 91       	lpm	r23, Z+
    1b0c:	08 95       	ret
    1b0e:	61 91       	ld	r22, Z+
    1b10:	71 91       	ld	r23, Z+
    1b12:	08 95       	ret

Disassembly of section .text.libgcc:

00001a8e <__movmemx_qi>:
    1a8e:	99 27       	eor	r25, r25

00001a90 <__movmemx_hi>:
    1a90:	77 fd       	sbrc	r23, 7
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <__movmemx_hi+0xe>
    1a94:	05 90       	lpm	r0, Z+
    1a96:	0d 92       	st	X+, r0
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	e1 f7       	brne	.-8      	; 0x1a94 <__movmemx_hi+0x4>
    1a9c:	08 95       	ret
    1a9e:	01 90       	ld	r0, Z+
    1aa0:	0d 92       	st	X+, r0
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <__movmemx_hi+0xe>
    1aa6:	08 95       	ret

Disassembly of section .text.libgcc.builtins:

000018c0 <__ashrdi3>:
    18c0:	97 fb       	bst	r25, 7
    18c2:	10 f8       	bld	r1, 0

000018c4 <__lshrdi3>:
    18c4:	16 94       	lsr	r1
    18c6:	00 08       	sbc	r0, r0
    18c8:	0f 93       	push	r16
    18ca:	08 30       	cpi	r16, 0x08	; 8
    18cc:	98 f0       	brcs	.+38     	; 0x18f4 <__lshrdi3+0x30>
    18ce:	08 50       	subi	r16, 0x08	; 8
    18d0:	23 2f       	mov	r18, r19
    18d2:	34 2f       	mov	r19, r20
    18d4:	45 2f       	mov	r20, r21
    18d6:	56 2f       	mov	r21, r22
    18d8:	67 2f       	mov	r22, r23
    18da:	78 2f       	mov	r23, r24
    18dc:	89 2f       	mov	r24, r25
    18de:	90 2d       	mov	r25, r0
    18e0:	f4 cf       	rjmp	.-24     	; 0x18ca <__lshrdi3+0x6>
    18e2:	05 94       	asr	r0
    18e4:	97 95       	ror	r25
    18e6:	87 95       	ror	r24
    18e8:	77 95       	ror	r23
    18ea:	67 95       	ror	r22
    18ec:	57 95       	ror	r21
    18ee:	47 95       	ror	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	0a 95       	dec	r16
    18f6:	aa f7       	brpl	.-22     	; 0x18e2 <__lshrdi3+0x1e>
    18f8:	0f 91       	pop	r16
    18fa:	08 95       	ret

Disassembly of section .text.libgcc.div:

000017fc <__udivmodsi4>:
    17fc:	a1 e2       	ldi	r26, 0x21	; 33
    17fe:	1a 2e       	mov	r1, r26
    1800:	aa 1b       	sub	r26, r26
    1802:	bb 1b       	sub	r27, r27
    1804:	fd 01       	movw	r30, r26
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <__udivmodsi4_ep>

00001808 <__udivmodsi4_loop>:
    1808:	aa 1f       	adc	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	ee 1f       	adc	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	a2 17       	cp	r26, r18
    1812:	b3 07       	cpc	r27, r19
    1814:	e4 07       	cpc	r30, r20
    1816:	f5 07       	cpc	r31, r21
    1818:	20 f0       	brcs	.+8      	; 0x1822 <__udivmodsi4_ep>
    181a:	a2 1b       	sub	r26, r18
    181c:	b3 0b       	sbc	r27, r19
    181e:	e4 0b       	sbc	r30, r20
    1820:	f5 0b       	sbc	r31, r21

00001822 <__udivmodsi4_ep>:
    1822:	66 1f       	adc	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	1a 94       	dec	r1
    182c:	69 f7       	brne	.-38     	; 0x1808 <__udivmodsi4_loop>
    182e:	60 95       	com	r22
    1830:	70 95       	com	r23
    1832:	80 95       	com	r24
    1834:	90 95       	com	r25
    1836:	9b 01       	movw	r18, r22
    1838:	ac 01       	movw	r20, r24
    183a:	bd 01       	movw	r22, r26
    183c:	cf 01       	movw	r24, r30
    183e:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00001a20 <__umulhisi3>:
    1a20:	a2 9f       	mul	r26, r18
    1a22:	b0 01       	movw	r22, r0
    1a24:	b3 9f       	mul	r27, r19
    1a26:	c0 01       	movw	r24, r0
    1a28:	a3 9f       	mul	r26, r19
    1a2a:	70 0d       	add	r23, r0
    1a2c:	81 1d       	adc	r24, r1
    1a2e:	11 24       	eor	r1, r1
    1a30:	91 1d       	adc	r25, r1
    1a32:	b2 9f       	mul	r27, r18
    1a34:	70 0d       	add	r23, r0
    1a36:	81 1d       	adc	r24, r1
    1a38:	11 24       	eor	r1, r1
    1a3a:	91 1d       	adc	r25, r1
    1a3c:	08 95       	ret
